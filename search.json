[{"path":[]},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement slwood89@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 MicroMoB authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/BH_aqua.html","id":"deterministic-model","dir":"Articles","previous_headings":"","what":"Deterministic model","title":"Beverton-Holt aquatic model","text":"state updating equation follows: \\[\\begin{equation} L_{t+1} = eggs + (1-molt) \\cdot surv \\cdot L_{t} \\left( \\frac{K}{L_{t}+K} \\right) \\\\ A_{t} = molt \\cdot surv \\cdot L_{t} \\left( \\frac{K}{L_{t}+K} \\right) \\end{equation}\\]","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/BH_aqua.html","id":"stochastic-model","dir":"Articles","previous_headings":"","what":"Stochastic model","title":"Beverton-Holt aquatic model","text":"stochastic model time step, first draw number survivors: \\[\\begin{equation} survivors \\sim \\mathrm{binomial}(L, surv \\left( \\frac{K}{L_{t}+K} \\right) \\end{equation}\\] number emerge also binomial random variate: \\[\\begin{equation} emerge \\sim \\mathrm{binomial}(survivors, molt) \\end{equation}\\] state updated: \\[\\begin{equation} L_{t+1} = eggs + survivors - emerge \\\\ A_{t} = emerge \\end{equation}\\]","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/BH_aqua.html","id":"deterministic-equilbrium","dir":"Articles","previous_headings":"","what":"Deterministic equilbrium","title":"Beverton-Holt aquatic model","text":"Despite nonlinear equation, can solve equilibrium. assume eggs known, desired daily emergence known (lambda, BH model’s notation). solve K L: \\[\\begin{equation} L = \\lambda \\left( \\frac{1}{molt} - 1 \\right) + eggs \\\\ K = \\frac{-\\lambda L}{\\lambda - L \\cdot molt \\cdot surv} \\end{equation}\\] can set simulation using RM mosquito model check everything equilibrium. First calculate equilibrium values. use components aquatic adult mosquito components. Now run deterministic simulation draw 10 stochastic trajectories.","code":"patches <- 1 tmax <- 1e2  M <- 120 p <- 0.9 lambda <- M*(1-p)  nu <- 25 f <- 0.3 eggs <- nu * f * M  # static pars molt <-  0.1 surv <- 0.9  # solve L L <- lambda * ((1/molt) - 1) + eggs K <- - (lambda * L) / (lambda - L*molt*surv) # deterministic run mod <- make_MicroMoB(tmax = tmax, p = patches) setup_aqua_BH(model = mod, stochastic = FALSE, molt = molt, surv = surv, K = K, L = L) setup_mosquito_RM(model = mod, stochastic = FALSE, f = f, q = 0.9, eip = 10, p = p, psi = diag(1), nu = nu, M = M, Y = 0, Z = 0)  out_det <- matrix(data = NaN, nrow = tmax + 1, ncol = 3) out_det[1L, ] <- c(mod$aqua$L, mod$aqua$A, mod$mosquito$M)  while (mod$global$tnow <= tmax) {   step_aqua(model = mod)   step_mosquitoes(model = mod)   out_det[mod$global$tnow + 1L, ] <- c(mod$aqua$L, mod$aqua$A, mod$mosquito$M)   mod$global$tnow <- mod$global$tnow + 1L }  # stochastic runs out_sto <- mclapply(X = 1:10, FUN = function(runid) {      mod <- make_MicroMoB(tmax = tmax, p = patches)   setup_aqua_BH(model = mod, stochastic = TRUE, molt = molt, surv = surv, K = K, L = L)   setup_mosquito_RM(model = mod, stochastic = TRUE, f = f, q = 0.9, eip = 10, p = p, psi = diag(1), nu = nu, M = M, Y = 0, Z = 0)      out_run <- matrix(data = NaN, nrow = tmax + 1, ncol = 3)   out_run[1L, ] <- c(mod$aqua$L, mod$aqua$A, mod$mosquito$M)      while (mod$global$tnow <= tmax) {     step_aqua(model = mod)     step_mosquitoes(model = mod)     out_run[mod$global$tnow + 1L, ] <- c(mod$aqua$L, mod$aqua$A, mod$mosquito$M)     mod$global$tnow <- mod$global$tnow + 1L   }      out_run <- as.data.frame(out_run)   out_run$run <- as.integer(runid)   return(out_run) })   out_det <- as.data.table(out_det) out_det[, \"Day\" := 0:tmax] out_det <- melt(out_det, id.vars = \"Day\", variable.name = \"Stage\", value.name = \"Count\") levels(out_det$Stage) <- c(\"L\", \"A\", \"M\")  out_sto <- do.call(rbind, out_sto) out_sto <- as.data.table(out_sto) out_sto <- melt(out_sto, id.vars = \"run\", variable.name = \"Stage\", value.name = \"Count\") out_sto[, \"Day\" := 0:tmax, by = c(\"run\", \"Stage\")] levels(out_sto$Stage) <- c(\"L\", \"A\", \"M\")  ggplot(data = out_sto) +     geom_line(aes(x = Day, y = Count, color = Stage, group = run), alpha = 0.35) +     geom_line(data = out_det, mapping = aes(x = Day, y = Count, color = Stage)) +     facet_wrap(. ~ Stage, scales = \"free\")"},{"path":"https://dd-harp.github.io/MicroMoB/articles/Contributing.html","id":"issues","dir":"Articles","previous_headings":"","what":"Issues","title":"Contributing","text":"find bug, question use feature sufficient documentation, suggestion improvement, please leave issue GitHub repo. bug reports please include: Micro-MoB version Operating System R version Steps recreate Expected behaviour Actual behaviour","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/Contributing.html","id":"git","dir":"Articles","previous_headings":"","what":"Git","title":"Contributing","text":"use Git project. means use main, dev, feat/*, bug/*, hotfix/* branches. Please refer post information type branch. main: branch always stores last “production” release software, protected branch. pull request submitted main unless dev, meaning software version updated. dev: pull requests users made dev branch. branch protected deletion. feat: new significantly enhanced features made feat branches merged dev. feat/* branch merged dev, can deleted. bug: branches fix bugs, usually raised issue. bug/* branch merged dev, can deleted. hotfix: difference bug/* hotfix/* branch hotfix small quick fixes (misspellings, incorrect arguments, etc.) short-lived. merged dev, can deleted. periodically merge dev master small release updates. releases appear GitHub releases page.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/Contributing.html","id":"continuous-integration","dir":"Articles","previous_headings":"","what":"Continuous integration","title":"Contributing","text":"use GitHub Actions continuous integration platform run workflows. workflows use r-lib/actions R packages. run three types workflows. R CMD check runs pull request [main, dev] branches. Test coverage runs pull requests [main, dev] uses codecov.io integration checking test coverage. Finally, pkgdown runs pushes main, occur dev merged main periodically. Please note sometimes hard diagnose bugs can due date workflows. find strange unusual bug pushing branch, one thing consider checking.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/Contributing.html","id":"pull-requests","dir":"Articles","previous_headings":"","what":"Pull Requests","title":"Contributing","text":"making pull request, please use dev base branch. adding new feature (.e. pull feat/* branch), please ensure added minimal tests using testthat functionality feature can tested.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MOI_human.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Queueing model for human superinfection","text":"Let’s check recover approximately correct distribution MOI. First set run simulation 1000 days. parameter values expect mean MOI 5. see simulation converges equilibrium distribution time. Now can plot compartment sizes.  Another check Poisson-ness MOI distribution plot compartment sizes last time point.","code":"h <- 0.025 r <- 1/200 b <- 0.55  EIR <- -log(1 - h) / b  n <- 1 tmax <- 1e3 MOI_init <- matrix(data = c(1e5, rep(0, 1e2)), nrow = 101, ncol = n)  mod <- make_MicroMoB(tmax = tmax, p = 1) setup_humans_MOI(model = mod, stochastic = TRUE, theta = matrix(1, nrow = n, ncol = 1), H = colSums(MOI_init), MOI = MOI_init, r = r, b = b)  MOI_out <- matrix(data = NaN, nrow = nrow(MOI_init), ncol = tmax + 1) MOI_out[, 1L] <- MOI_init  while (mod$global$tnow <= mod$global$tmax) {   mod$human$EIR <- EIR   step_humans(model = mod)   MOI_out[, mod$global$tnow + 1L] <- mod$human$MOI   mod$global$tnow <- mod$global$tnow + 1L } weighted.mean(x = 0:100, w = MOI_out[, tmax]) #> [1] 5.04424 # plot output MOI_out_dt <- as.data.table(t(MOI_out)) MOI_out_dt <- suppressWarnings(melt(MOI_out_dt)) setnames(MOI_out_dt, new = c(\"MOI\", \"Count\")) levels(MOI_out_dt$MOI) <- 0:100 MOI_out_dt[, \"Day\" := 0:tmax, by = MOI]  ggplot(data = MOI_out_dt) +   geom_line(aes(x = Day, y = Count, group = MOI, color = as.numeric(MOI))) ggplot(data.frame(Count = MOI_out[, tmax], MOI = 0:100), aes(MOI, Count)) +     geom_bar(stat = \"identity\")"},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"Micro-MoB software package implements framework building mathematical models mosquito-borne pathogen transmission (MBPT). framework flexible enough model real scenarios time places constraints upon parts framework interact software become obfuscatingly complex time new feature must added. framework defines components interface. components cover parts MBPT models: adult mosquitoes, immature (aquatic) mosquitoes, resident humans, non-resident visitors, blood hosts. specific instantation component called model. example, Ross-Macdonald model adult mosquito dynamics can fulfill adult mosquito interface thus fill component “box”. Certain computations involve passing information components invariant, bloodmeal, matrix computed describing bites mosquitoes distributed across hosts. computations use generic component interface, model fulfilling interface can fit seamlessly existing set models.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"software-design","dir":"Articles","previous_headings":"","what":"Software design","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"accomplish component-interface design R, use S3 object system. component named element model object (environment). interface defines set generic functions dispatch specific class object taking place component.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"components","dir":"Articles","previous_headings":"","what":"Components","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"model broken components, humans, immature adult mosquitoes (others). component interface, methods must defined component. component’s interface stored file, example, R/humans_interface.R shows user methods must defined human model. components (e.g. bloodmeal) call generic methods knowing specific code implementing , must return values consistent definition. call specific implementation component model. Specific implementations found files replace _interface model name, example R/humans_SIR.R. accompanying test files located tests/testthat. creating new model, please remember test adequately. list components require interfaces specific models implement .","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"mosquitoes","dir":"Articles","previous_headings":"Components","what":"Mosquitoes","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"mosquito component responsible dynamics update adult mosquito populations. interface defined R/mosquito_interface.R, interface methods required implemented can found .","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"aquatic","dir":"Articles","previous_headings":"Components","what":"Aquatic","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"aquatic component responsible dynamics update immature (aquatic stage) mosquito populations. interface defined R/aquatic_interface.R, interface methods required implemented can found .","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"humans","dir":"Articles","previous_headings":"Components","what":"Humans","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"human component updates human populations. interface defined R/humans_interface.R, interface methods required implemented can found .","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"visitor","dir":"Articles","previous_headings":"Components","what":"Visitor","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"human component updates human populations outside resident population geographic area simulated. interface defined R/visitor_interface.R, interface methods required implemented can found .","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"other-blood-hosts","dir":"Articles","previous_headings":"Components","what":"Other blood hosts","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"(alternative) blood host component responsible blood hosts mosquitoes (livestock, dogs, etc). interface defined R/other_interface.R, interface methods required implemented can found .","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"writing-new-models","dir":"Articles","previous_headings":"","what":"Writing new models","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"write model component means one must write methods fulfill component’s interface, ensure methods return correct data structure. Information methods can found function reference component. addition, new model must setup function, takes parameters, argument checking, attaches new object correct name class attached model object returned make_MicroMoB(). example, make new mosquito model, class MyModel, one need following: Write function setup_mosquito_MyModel attaches object (usually list) model environment class attribute assigned \"MyModel\". Write methods interface compute_f.MyModel, compute_q.MyModel, compute_Z.MyModel, compute_oviposit.MyModel. Information method expected compute return can found . Write step (updating) function, step_mosquitoes.MyModel. One can optionally allow class attribute model list 2 elements allow dispatching stochastic deterministic step updates, case one additionally write step_mosquitoes.MyModel_stochastic step_mosquitoes.MyModel_deterministic. Please look source code Ross-Macdonald mosquito model see .","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"invariants","dir":"Articles","previous_headings":"","what":"Invariants","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"call invariants functions dispatch types; rather collect information need component via component’s interface, return information right dimension properly written model fulfilling component. invariants use information compute quantities allow interaction (feedback) components, passed back component used compute update.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/MicroMoB.html","id":"bloodmeal","dir":"Articles","previous_headings":"Invariants","what":"Bloodmeal","title":"Micro-MoB (Microsimulation for mosquito-borne pathogens)","text":"describe bloodmeal algorithm works separate article, vignette(\"bloodmeal\").","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/RM_mosquito.html","id":"deterministic-model","dir":"Articles","previous_headings":"","what":"Deterministic model","title":"Ross-Macdonald mosquito model","text":"deterministic model following form: \\[\\begin{equation} Y_{0} = \\kappa_{t} (M_{t} - Y_{t})  \\\\ M_{t+1} = (pM_{t}) \\cdot \\psi +\\lambda_{t} \\\\ Y_{t+1} = p(Y_{t} + Y_{0}) \\cdot \\psi \\\\ Z_{t+1} = (pZ_{t} \\cdot \\psi) + (\\kappa_{t-EIP} (M_{t-EIP} - Y_{t-EIP}) p^{EIP} \\cdot \\psi^{EIP}) \\end{equation}\\] minor difference code, EIP forward-looking rather backwards. also note \\(p\\) allowed time-varying, even though represented constant. \\(\\kappa\\) passed mosquito component every day parameter, net infectiousness hosts mosquitoes (probability mosquito become infected biting random blood host). \\(\\lambda_{t}\\) number newly emerging adults day. calculated aquatic (immature) component passed mosquito component parameter.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/RM_mosquito.html","id":"stochastic-model","dir":"Articles","previous_headings":"","what":"Stochastic model","title":"Ross-Macdonald mosquito model","text":"stochastic model deterministic one survival probabilities used binomial draws (hypergeometric draws nested sampling), \\(\\psi\\) parameterizes multinomial draw destination places/patches mosquitoes leaving home place. stochastic model designed care appropriately tested make sure draw inconsistent event histories mosquitoes (e.g. sampling survival twice mosquitoes compartment).","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/RM_mosquito.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Ross-Macdonald mosquito model","text":"Let’s example. ’ll need set aquatic mosquito components. example run three years. make \\(\\lambda\\) vector giving emergence patch, day year, peaking middle year 100 mosquitoes emerging per day, per patch. also assume daily survival p sinsuoidal, period 365 days. let EIP constant 5 days. also set \\(\\kappa = 0.05\\) day.","code":"tmax <- 365 * 3 p <- 3  lambda <- dnorm(x = 1:365, mean = 180, sd = 90) lambda <- lambda * (100/max(lambda)) lambda <- t(replicate(p, lambda))  psurv <- (sin((1:365)/365*2*pi) + 1.01)/2 * 0.9  EIP <- 5  f <- 0.3 q <- 1 psi <- matrix(   c(     0.9, 0.05, 0.05,     0.05, 0.9, 0.05,     0.05, 0.05, 0.9   ), nrow = 3, ncol = 3,    byrow = TRUE )   par(mar = c(5,5,2,5)) plot(lambda[1, ], type = \"l\", col = \"red\", xlab = \"Day\", ylab = \"Lambda (red)\") par(new = TRUE) plot(psurv, type = \"l\", axes = F, xlab = NA, ylab = NA, col = \"blue\") axis(side = 4) mtext(side = 4, line = 3, 'Survival Probability (blue)')"},{"path":"https://dd-harp.github.io/MicroMoB/articles/RM_mosquito.html","id":"deterministic-simulation","dir":"Articles","previous_headings":"Example","what":"Deterministic simulation","title":"Ross-Macdonald mosquito model","text":"Now can set models. Let’s first deterministic simulation. use setup_mosquito_RM setup RM mosquito model mosquito component, setup_aqua_trace set aquatic (immature) component simple trace (forced) model.","code":"M <- c(100, 100, 100) Y <- c(0, 0, 0) Z <- c(0, 0, 0)  mod <- make_MicroMoB(tmax = tmax, p = 3) setup_mosquito_RM(mod, stochastic = FALSE, f = f, q = q, eip = EIP, p = psurv, psi = psi, M = M, Y = Y, Z = Z) setup_aqua_trace(model = mod, lambda = lambda, stochastic = FALSE)  M_det <- matrix(data = 0, nrow = tmax, ncol = 3) Y_det <- matrix(data = 0, nrow = tmax, ncol = 3) Z_det <- matrix(data = 0, nrow = tmax, ncol = 3)  # run it while(mod$global$tnow <= tmax) {   mod$mosquito$kappa <- rep(0.05, 3)   step_aqua(model = mod)   step_mosquitoes(model = mod)   M_det[mod$global$tnow, ] <- mod$mosquito$M   Y_det[mod$global$tnow, ] <- mod$mosquito$Y   Z_det[mod$global$tnow, ] <- mod$mosquito$Z   mod$global$tnow <- mod$global$tnow + 1L }  det_out <- as.data.table(rbind(M_det, Y_det, Z_det))  det_out[, \"Day\" := as.integer(rep(1:tmax, 3))] det_out[, \"Compartment\" := rep(c(\"M\", \"Y\", \"Z\"), times = rep(tmax, 3))] det_out <- melt(det_out, id.vars = c(\"Day\", \"Compartment\"), variable.name = \"Patch\", value.name = \"Count\") det_out[, \"Patch\" := as.integer(Patch)]  ggplot(det_out) +     geom_line(aes(x = Day, y = Count, color = Compartment)) +     facet_grid(Patch ~ .)"},{"path":"https://dd-harp.github.io/MicroMoB/articles/RM_mosquito.html","id":"stochastic-simulation","dir":"Articles","previous_headings":"Example","what":"Stochastic simulation","title":"Ross-Macdonald mosquito model","text":"Now run 10 stochastic simulations, using parameters.","code":"sto_out <- mclapply(X = 1:10, FUN = function(runid) {      mod <- make_MicroMoB(tmax = tmax, p = 3)   setup_mosquito_RM(mod, stochastic = TRUE, f = f, q = q, eip = EIP, p = psurv, psi = psi, M = M, Y = Y, Z = Z)   setup_aqua_trace(model = mod, lambda = lambda, stochastic = TRUE)      M_out <- as.data.frame(matrix(data = 0, nrow = tmax, ncol = 3))   Y_out <- as.data.frame(matrix(data = 0, nrow = tmax, ncol = 3))   Z_out <- as.data.frame(matrix(data = 0, nrow = tmax, ncol = 3))      # run it   while(mod$global$tnow <= tmax) {     mod$mosquito$kappa <- rep(0.05, 3)     step_aqua(model = mod)     step_mosquitoes(model = mod)     M_out[mod$global$tnow, ] <- mod$mosquito$M     Y_out[mod$global$tnow, ] <- mod$mosquito$Y     Z_out[mod$global$tnow, ] <- mod$mosquito$Z     mod$global$tnow <- mod$global$tnow + 1L   }      out <- as.data.table(rbind(M_out, Y_out, Z_out))   out[, \"Day\" := as.integer(rep(1:tmax, 3))]   out[, \"Compartment\" := rep(c(\"M\", \"Y\", \"Z\"), times = rep(tmax, 3))]   out <- melt(out, id.vars = c(\"Day\", \"Compartment\"), variable.name = \"Patch\", value.name = \"Count\")   out[, \"Patch\" := as.integer(Patch)]   out[, \"Run\" := as.integer(runid)]      return(out) })  sto_out <- do.call(rbind, sto_out)  ggplot(sto_out) +     geom_line(aes(x = Day, y = Count, color = Compartment, group = interaction(Run, Compartment)), alpha = 0.35) +     facet_grid(Patch ~ .)"},{"path":"https://dd-harp.github.io/MicroMoB/articles/RM_transmission.html","id":"endemic-equilibrium-solution","dir":"Articles","previous_headings":"","what":"Endemic equilibrium solution","title":"Ross-Macdonald transmission model","text":"First write closest approximating ODE model derive endemic equilibrium check discrete time models approximately correct. Let human component described : \\[\\begin{equation} \\dot{S} = -b fqZ (1/N) S + rI \\\\ \\dot{} = b fqZ (1/N) S - rI \\end{equation}\\] , \\(fqZ\\) EIR, \\(N\\) total human population size. know values \\(S\\) \\(\\) can solve density infectious mosquitoes required give values endemic equilibrium: \\[\\begin{equation}   Z = \\frac{rIN}{bfqS} \\end{equation}\\] Now let us look system ODEs describing mosquitoes. Actually delay differential equations (DDE) incorporate delay infection infectiousness: \\[\\begin{equation}   \\dot{M} = \\lambda - gM \\\\   \\dot{Y} = fq\\kappa (M-Y) - gY \\\\   \\dot{Z} = fq\\kappa_{t-EIP} (M_{t-EIP} - Y_{t-EIP}) e^{-gEIP} - gZ \\end{equation}\\] interested equilibrium solutions, derivatives zero state variables time, can ignore delays: \\[\\begin{equation}   0 = \\lambda - gM \\\\   0 = fq\\kappa (M-Y) - gY \\\\   0 = fq\\kappa (M - Y) e^{-gEIP} - gZ \\end{equation}\\] Plug solution \\(Z\\) last equation get expression \\(M-Y\\) terms known quantities: \\[\\begin{equation} M-Y = \\frac{gZ}{fq\\kappa e^{-gEIP}} \\end{equation}\\] Now plug \\(M-Y\\) second equation get expression \\(Y\\), simplification get: \\[\\begin{equation}   Y = \\frac{Z}{e^{-gEIP}} \\end{equation}\\] get \\(M\\), add \\((M-Y) + Y\\) simplify get: \\[\\begin{equation} M = \\frac{Z(g + fq\\kappa)}{fq\\kappa e^{-gEIP}} \\end{equation}\\] Finally plug first equation solve \\(\\lambda\\): \\[\\begin{equation}   \\lambda = g \\left( \\frac{Z(g + fq\\kappa)}{fq\\kappa e^{-gEIP}} \\right) \\end{equation}\\] can set model parameters calculate numeric solutions values.","code":"# mosquito parameters f <- 0.3 q <- 1 eip <- 14 EIP <- eip + 1  lifespan <- 20 g <- 1/lifespan  # human parameters b <- 0.55 c <- 0.15 r <- 1/200  S <- 1e3 I <- 300 N <- S + I  # transmission parameters kappa <- (I/N)*c  # equilibrium solutions Z <- (r*I*N) / (b*f*q*S) Y <- Z / exp(-g*EIP) M <- (Z*(g + (f*q*kappa))) / (f*q*kappa*exp(-g*EIP)) lambda <- g*M"},{"path":"https://dd-harp.github.io/MicroMoB/articles/RM_transmission.html","id":"micromob-simulation","dir":"Articles","previous_headings":"","what":"MicroMoB simulation","title":"Ross-Macdonald transmission model","text":"Now let’s set simulation single patch single human stratum. first run deterministic simulation. first thing need create model object initialize components specific models, . Note explicitly calculated rough equilibrium values number incubating mosquitoes day, set ZZ mosquito object, required general, function scatter appropriate total number across days. Now can make matrices store output run model. Note call compute_bloodmeal() updating functions called. crucical properly updating models Micro-MoB. Now draw 10 trajectories stochastic simulation, plot output. plot cloud stochastic trajectories faint lines deterministic solution solid lines.","code":"patches <- 1 nstrata <- 1 tmax <- 365 * 2  # human parameters theta <- diag(nstrata) H <- N X <- I  # mosquito parameters p <- 1 - 1/lifespan psi <- diag(patches)  # incubating mosquitoes pp <- p^(eip:1) pp <- pp / sum(pp) ZZ <- (Y-Z)*pp ZZ <- as.matrix(ZZ) mod <- make_MicroMoB(tmax = tmax, p = patches) setup_humans_SIS(mod, stochastic = FALSE, theta = theta, H = H, X = X, b = b, c = c, r = r) setup_aqua_trace(mod, stochastic = FALSE, lambda = lambda) setup_mosquito_RM(mod, stochastic = FALSE, f = f, q = q, eip = eip, p = p, psi = psi, M = M, Y = Y, Z = Z) setup_alternative_trace(mod) setup_visitor_trace(mod)  mod$mosquito$ZZ <- ZZ # matrices to hold output mosquito_out <- matrix(data = 0, nrow = tmax, ncol = 4, dimnames = list(NULL, c(\"Day\", \"M\", \"Y\", \"Z\"))) mosquito_out[, \"Day\"] <- 1:tmax human_out <- matrix(data = 0, nrow = tmax, ncol = 3, dimnames = list(NULL, c(\"Day\", \"S\", \"I\"))) human_out[, \"Day\"] <- 1:tmax  # run it while (mod$global$tnow <= tmax) {   compute_bloodmeal(model = mod)   step_aqua(model = mod)   step_mosquitoes(model = mod)   step_humans(model = mod)   mosquito_out[mod$global$tnow, 2:4] <- c(mod$mosquito$M, mod$mosquito$Y, mod$mosquito$Z)   human_out[mod$global$tnow, 2:3] <- c(mod$human$H - mod$human$X, mod$human$X)   mod$global$tnow <- mod$global$tnow + 1L }  mosquito_out <- as.data.table(mosquito_out) mosquito_out <- melt(mosquito_out, id.vars = \"Day\", variable.name = \"Compartment\", value.name = \"Count\") mosquito_out[, \"Species\" := \"Mosquito\"] human_out <- as.data.table(human_out) human_out <- melt(human_out, id.vars = \"Day\", variable.name = \"Compartment\", value.name = \"Count\") human_out[, \"Species\" := \"Human\"]  det_out <- rbind(mosquito_out, human_out) sto_out <- mclapply(X = 1:10, FUN = function(runid) {      mod <- make_MicroMoB(tmax = tmax, p = patches)   setup_humans_SIS(mod, stochastic = TRUE, theta = theta, H = H, X = X, b = b, c = c, r = r)   setup_aqua_trace(mod, stochastic = TRUE, lambda = lambda)   setup_mosquito_RM(mod, stochastic = TRUE, f = f, q = q, eip = eip, p = p, psi = psi, M = M, Y = Y, Z = Z)   setup_alternative_trace(mod)   setup_visitor_trace(mod)      # matrices to hold output   mosquito_out <- matrix(data = 0, nrow = tmax, ncol = 4, dimnames = list(NULL, c(\"Day\", \"M\", \"Y\", \"Z\")))   mosquito_out[, \"Day\"] <- 1:tmax   human_out <- matrix(data = 0, nrow = tmax, ncol = 3, dimnames = list(NULL, c(\"Day\", \"S\", \"I\")))   human_out[, \"Day\"] <- 1:tmax      # run it   while (mod$global$tnow <= tmax) {     compute_bloodmeal(model = mod)     step_aqua(model = mod)     step_mosquitoes(model = mod)     step_humans(model = mod)     mosquito_out[mod$global$tnow, 2:4] <- c(mod$mosquito$M, mod$mosquito$Y, mod$mosquito$Z)     human_out[mod$global$tnow, 2:3] <- c(mod$human$H - mod$human$X, mod$human$X)     mod$global$tnow <- mod$global$tnow + 1L   }      mosquito_out <- as.data.table(mosquito_out)   mosquito_out <- melt(mosquito_out, id.vars = \"Day\", variable.name = \"Compartment\", value.name = \"Count\")   mosquito_out[, \"Species\" := \"Mosquito\"]   human_out <- as.data.table(human_out)   human_out <- melt(human_out, id.vars = \"Day\", variable.name = \"Compartment\", value.name = \"Count\")   human_out[, \"Species\" := \"Human\"]      out <- rbind(mosquito_out, human_out)   out[, \"Run\" := as.integer(runid)]      return(out) })  sto_out <- do.call(rbind, sto_out)  ggplot(sto_out) +     geom_line(aes(x = Day, y = Count, color = Compartment, group = interaction(Run, Compartment)), alpha = 0.3) +     geom_line(data = det_out, aes(x = Day, y = Count, color = Compartment)) +     facet_wrap(. ~ Species, scales = \"free\")"},{"path":"https://dd-harp.github.io/MicroMoB/articles/bloodmeal.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Blood feeding","text":"Blood feeding (adult female mosquito seeks feeds blood host) crucial invariant Micro-MoB, models mosquito-borne pathogen transmission (MBPT) generally. Micro-MoB, blood feeding algorithm uses information provided interface component compute values give distribution bites mosquitoes onto hosts, rate mosquitoes feed. blood feeding function (compute_bloodmeal()) R/bloodmeal.R.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/bloodmeal.html","id":"schematic","dir":"Articles","previous_headings":"","what":"Schematic","title":"Blood feeding","text":"schematic describing visually quantities generated blood meal algorithm. Different colors refer different components: green indicates human characteristics independent infection status, purple indicates human characteristics dependent upon infection status, blue indicates values adult mosquito component, yellow indicates values blood hosts visitor components. Values computed blood meal directly involved transmission red, values directly relevant transmission grey.  bloodmeal function updates several values within specific components. : \\(\\kappa\\): vector length p, giving net infectiousness hosts mosquitoes patch. \\(EIR\\): vector length n, giving entomological inoculation rate hosts strata. \\(f\\): vector length p, giving blood feeding rate mosquitoes patch. \\(q\\): vector length p, giving proportion blood meals taken human hosts mosquitoes patch. values computed updates, component’s update (step) function can appropriately update infection dynamics. four values crucial metrics describe mosquitoes feed upon hosts, pathogens transferred infectious hosts susceptible mosquitoes, vice versa. reason call bloodfeeding invariant, meaning full MBPT model need simulate process.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/bloodmeal.html","id":"human-component","dir":"Articles","previous_headings":"","what":"Human component","title":"Blood feeding","text":"Using generic interface human component, following values calculated used compute biting transmission. W: compute_W, gives weighted person time risk spent patch H: compute_H, gives total population strata x: compute_x, gives net infectiousness humans strata wf: compute_wf, gives biting weights strata Psi: compute_Psi, gives time risk matrix","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/bloodmeal.html","id":"mosquito-component","dir":"Articles","previous_headings":"","what":"Mosquito component","title":"Blood feeding","text":"Likewise, following values required mosquitoes. f: compute_f, gives per-capita blood feeding rate patch q: compute_q, gives human blood feeding proportion patch Z: compute_Z, gives infectious mosquito density patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/bloodmeal.html","id":"other-components","dir":"Articles","previous_headings":"","what":"Other components","title":"Blood feeding","text":"also need compute: Wd: compute_Wd, biting availability visitors patch O: compute_O, biting availability blood hosts patch xd: compute_xd, net infectiousness visitors patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/bloodmeal.html","id":"biting-distribution-matrix-beta","dir":"Articles","previous_headings":"","what":"Biting distribution matrix (\\(\\beta\\))","title":"Blood feeding","text":"\\(beta\\), biting distribution matrix, n p matrix describes bites mosquitoes patches get distributed human population strata. multiplied right vector \\(fq \\upsilon Z\\) gives total number bites humans taken mosquitoes patch, result length n vector giving per-capita \\(EIR\\). \\[\\begin{equation} \\beta_{n\\times p} = \\mbox{diag}(w_{f}) \\cdot \\Psi \\cdot \\mbox{diag}(1/W) \\\\ \\end{equation}\\]","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/bloodmeal.html","id":"entomological-inoculation-rate-eir","dir":"Articles","previous_headings":"","what":"Entomological inoculation rate (\\(EIR\\))","title":"Blood feeding","text":"entomological inoculation rate directly proportional force infection humans \\(h = EIR \\cdot b\\), \\(b\\) transmission efficiency, probability bite infectious mosquito successfully causes infection human host. simply computed : \\[\\begin{equation} EIR_{n\\times 1} = \\beta \\cdot fq\\upsilon Z \\end{equation}\\]","code":""},{"path":"https://dd-harp.github.io/MicroMoB/articles/bloodmeal.html","id":"net-infectiousness-of-human-population-kappa","dir":"Articles","previous_headings":"","what":"Net infectiousness of human population (\\(\\kappa\\))","title":"Blood feeding","text":"net infectiousness humans probability mosquito become infected biting random human host. ’s directly proportional force infection mosquitoes, \\(\\kappa fq\\). calculated passed mosquitoes, particular mosquito model can use update state time step. \\[\\begin{equation} \\kappa_{p\\times 1} \\upsilon \\cdot (\\beta^{\\intercal} \\cdot (xH)) + (1 - \\upsilon) x_{\\delta} \\end{equation}\\]","code":""},{"path":"https://dd-harp.github.io/MicroMoB/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean L. Wu. Author, maintainer. David L. Smith. Author.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wu S, Smith D (2022). MicroMoB: Discrete time simulation mosquito-borne pathogen transmission. https://dd-harp.github.io/MicroMoB/, https://github.com/dd-harp/MicroMoB.","code":"@Manual{,   title = {MicroMoB: Discrete time simulation of mosquito-borne pathogen transmission},   author = {Sean L. Wu and David L. Smith},   year = {2022},   note = {https://dd-harp.github.io/MicroMoB/, https://github.com/dd-harp/MicroMoB}, }"},{"path":[]},{"path":"https://dd-harp.github.io/MicroMoB/index.html","id":"what-is-micro-mob","dir":"","previous_headings":"","what":"What is Micro-MoB?","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"Micro-MoB made simplify task model building mosquito-borne pathogen transmission (MBPT) systems. stands “microsimulation mosquito-borne pathogens”. modular framework build discrete time MBPT models. uses R’s S3 object system define set components interfaces can filled specific model implements interface. parts, along certain invariants can put together define full simulation model. hope proves useful. Please visit website learn .","code":""},{"path":"https://dd-harp.github.io/MicroMoB/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"","code":"remotes::install_github('dd-harp/MicroMoB') library(MicroMoB)"},{"path":"https://dd-harp.github.io/MicroMoB/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"learn software design, problems designed solve, build new models Micro-MoB, please read vignette(\"MicroMoB\"). , vignette(\"bloodmeal\") describes bloodmeal algorithm computes distribution bites using component’s interface, allowing different models linked consistent framework. also articles describing well-known models specific components MBPT models implemented Micro-MoB: vignette(\"RM_mosquito\"): read implementation flexible Ross-Macdonald model adult mosquito dynamics. vignette(\"MOI_human\"): read implementation (M/M/∞) queuing model superinfection humans. vignette(\"BH_aqua\"): read simple non-linear model aquatic (immature) stage mosquito dynamics based well known Beverton-Holt model ecology. vignette(\"RM_transmission\"): read put together models fulfilling component run simple Ross-Macdonald style model pathogen transmission human hosts mosquito vectors.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"Thank interest Micro-MoB! bug report, please open issue GitHub. like open pull request questions, please see guide contributing project vignette(\"Contributing\").","code":""},{"path":"https://dd-harp.github.io/MicroMoB/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"Please note Micro-MoB project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/MicroMoB.html","id":null,"dir":"Reference","previous_headings":"","what":"MicroMoB: Microsimulation for mosquito-borne pathogens — MicroMoB","title":"MicroMoB: Microsimulation for mosquito-borne pathogens — MicroMoB","text":"Discrete time simulation mosquito-borne pathogen transmission","code":""},{"path":[]},{"path":"https://dd-harp.github.io/MicroMoB/reference/MicroMoB.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MicroMoB: Microsimulation for mosquito-borne pathogens — MicroMoB","text":"Maintainer: Sean L. Wu slwood89@gmail.com (ORCID) Authors: David L. Smith smitdave@uw.edu (ORCID)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.MOI.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human population strata sizes for MOI model (\\(H\\)) — compute_H.MOI","title":"Compute human population strata sizes for MOI model (\\(H\\)) — compute_H.MOI","text":"Compute human population strata sizes MOI model (\\(H\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.MOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human population strata sizes for MOI model (\\(H\\)) — compute_H.MOI","text":"","code":"# S3 method for MOI compute_H(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.MOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human population strata sizes for MOI model (\\(H\\)) — compute_H.MOI","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human population strata sizes for SIS model (\\(H\\)) — compute_H.SIS","title":"Compute human population strata sizes for SIS model (\\(H\\)) — compute_H.SIS","text":"Compute human population strata sizes SIS model (\\(H\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human population strata sizes for SIS model (\\(H\\)) — compute_H.SIS","text":"","code":"# S3 method for SIS compute_H(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human population strata sizes for SIS model (\\(H\\)) — compute_H.SIS","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human population strata sizes (\\(H\\)) — compute_H","title":"Compute human population strata sizes (\\(H\\)) — compute_H","text":"method dispatches type model$human.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human population strata sizes (\\(H\\)) — compute_H","text":"","code":"compute_H(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human population strata sizes (\\(H\\)) — compute_H","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_H.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute human population strata sizes (\\(H\\)) — compute_H","text":"vector length n giving size human population stratum","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_O.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available alternative blood hosts (\\(O\\)) — compute_O","title":"Compute available alternative blood hosts (\\(O\\)) — compute_O","text":"method dispatches type model$alternative.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_O.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available alternative blood hosts (\\(O\\)) — compute_O","text":"","code":"compute_O(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_O.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available alternative blood hosts (\\(O\\)) — compute_O","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_O.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute available alternative blood hosts (\\(O\\)) — compute_O","text":"vector length p giving biting availability blood hosts patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_O.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available alternative blood hosts for trace model (\\(O\\)) — compute_O.trace","title":"Compute available alternative blood hosts for trace model (\\(O\\)) — compute_O.trace","text":"Compute available alternative blood hosts trace model (\\(O\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_O.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available alternative blood hosts for trace model (\\(O\\)) — compute_O.trace","text":"","code":"# S3 method for trace compute_O(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_O.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available alternative blood hosts for trace model (\\(O\\)) — compute_O.trace","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.MOI.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time at risk matrix for MOI model (\\(\\Psi\\)) — compute_Psi.MOI","title":"Compute time at risk matrix for MOI model (\\(\\Psi\\)) — compute_Psi.MOI","text":"Compute time risk matrix MOI model (\\(\\Psi\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.MOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time at risk matrix for MOI model (\\(\\Psi\\)) — compute_Psi.MOI","text":"","code":"# S3 method for MOI compute_Psi(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.MOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time at risk matrix for MOI model (\\(\\Psi\\)) — compute_Psi.MOI","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time at risk matrix for SIS model (\\(\\Psi\\)) — compute_Psi.SIS","title":"Compute time at risk matrix for SIS model (\\(\\Psi\\)) — compute_Psi.SIS","text":"Compute time risk matrix SIS model (\\(\\Psi\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time at risk matrix for SIS model (\\(\\Psi\\)) — compute_Psi.SIS","text":"","code":"# S3 method for SIS compute_Psi(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time at risk matrix for SIS model (\\(\\Psi\\)) — compute_Psi.SIS","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","text":"time risk matrix \\(\\Psi = \\Theta \\xi\\) method dispatches type model$human.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","text":"","code":"compute_Psi(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Psi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","text":"matrix n rows p columns, time risk matrix","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.MOI.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available humans for MOI model (\\(W\\)) — compute_W.MOI","title":"Compute available humans for MOI model (\\(W\\)) — compute_W.MOI","text":"Compute available humans MOI model (\\(W\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.MOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available humans for MOI model (\\(W\\)) — compute_W.MOI","text":"","code":"# S3 method for MOI compute_W(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.MOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available humans for MOI model (\\(W\\)) — compute_W.MOI","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available humans for SIS model (\\(W\\)) — compute_W.SIS","title":"Compute available humans for SIS model (\\(W\\)) — compute_W.SIS","text":"Compute available humans SIS model (\\(W\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available humans for SIS model (\\(W\\)) — compute_W.SIS","text":"","code":"# S3 method for SIS compute_W(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available humans for SIS model (\\(W\\)) — compute_W.SIS","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available humans (\\(W\\)) — compute_W","title":"Compute available humans (\\(W\\)) — compute_W","text":"normally computed $$W = \\Psi^{\\intercal} \\cdot w_{f} H$$. method dispatches type model$human.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available humans (\\(W\\)) — compute_W","text":"","code":"compute_W(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available humans (\\(W\\)) — compute_W","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_W.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute available humans (\\(W\\)) — compute_W","text":"vector length p giving biting availability human hosts patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","title":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","text":"method dispatches type model$visitor.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","text":"","code":"compute_Wd(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","text":"vector length p giving biting availability visitors patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Wd.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available visitors for trace model (\\(W_{\\delta}\\)) — compute_Wd.trace","title":"Compute available visitors for trace model (\\(W_{\\delta}\\)) — compute_Wd.trace","text":"Compute available visitors trace model (\\(W_{\\delta}\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Wd.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available visitors for trace model (\\(W_{\\delta}\\)) — compute_Wd.trace","text":"","code":"# S3 method for trace compute_Wd(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Wd.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available visitors for trace model (\\(W_{\\delta}\\)) — compute_Wd.trace","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute density of infective mosquitoes for RM model (\\(Z\\)) — compute_Z.RM","title":"Compute density of infective mosquitoes for RM model (\\(Z\\)) — compute_Z.RM","text":"method returns Z.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute density of infective mosquitoes for RM model (\\(Z\\)) — compute_Z.RM","text":"","code":"# S3 method for RM compute_Z(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute density of infective mosquitoes for RM model (\\(Z\\)) — compute_Z.RM","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","title":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","text":"method dispatches type model$mosquito. \\(Z\\) also known \"sporozoite rate\" malariaology.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","text":"","code":"compute_Z(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","text":"vector length p giving density infected infectious mosquitoes patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute null density of infective mosquitoes (\\(Z\\)) — compute_Z.trace","title":"Compute null density of infective mosquitoes (\\(Z\\)) — compute_Z.trace","text":"Compute null density infective mosquitoes (\\(Z\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute null density of infective mosquitoes (\\(Z\\)) — compute_Z.trace","text":"","code":"# S3 method for trace compute_Z(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_Z.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute null density of infective mosquitoes (\\(Z\\)) — compute_Z.trace","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_bloodmeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"run prior step functions update components time step. computes various quantities related disease transmission species using generic interfaces (methods) provided component. updates EIR vector human component, kappa, net infectiousness hosts mosquito component.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_bloodmeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"","code":"compute_bloodmeal(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_bloodmeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.BH.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults from Beverton-Holt dynamics — compute_emergents.BH","title":"Compute number of newly emerging adults from Beverton-Holt dynamics — compute_emergents.BH","text":"function dispatches second class attribute model$aqua stochastic deterministic behavior.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.BH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults from Beverton-Holt dynamics — compute_emergents.BH","text":"","code":"# S3 method for BH compute_emergents(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.BH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults from Beverton-Holt dynamics — compute_emergents.BH","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","title":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","text":"method dispatches type model$aqua","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","text":"","code":"compute_emergents(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","text":"vector length p giving number newly emerging adult patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","title":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","text":"function dispatches second class attribute model$aqua stochastic deterministic behavior.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","text":"","code":"# S3 method for trace compute_emergents(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","text":"see compute_emergents.trace_deterministic compute_emergents.trace_stochastic","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults from forcing term (deterministic) — compute_emergents.trace_deterministic","title":"Compute number of newly emerging adults from forcing term (deterministic) — compute_emergents.trace_deterministic","text":"Return column lambda matrix day.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults from forcing term (deterministic) — compute_emergents.trace_deterministic","text":"","code":"# S3 method for trace_deterministic compute_emergents(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults from forcing term (deterministic) — compute_emergents.trace_deterministic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults from forcing term (stochastic) — compute_emergents.trace_stochastic","title":"Compute number of newly emerging adults from forcing term (stochastic) — compute_emergents.trace_stochastic","text":"Draw Poisson distributed number emerging adults mean parameter column trace matrix day.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults from forcing term (stochastic) — compute_emergents.trace_stochastic","text":"","code":"# S3 method for trace_stochastic compute_emergents(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_emergents.trace_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults from forcing term (stochastic) — compute_emergents.trace_stochastic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mosquito feeding rate for RM model (\\(f\\)) — compute_f.RM","title":"Compute mosquito feeding rate for RM model (\\(f\\)) — compute_f.RM","text":"method simply returns f parameter mosquito object, RM model assumes constant blood feeding rate.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mosquito feeding rate for RM model (\\(f\\)) — compute_f.RM","text":"","code":"# S3 method for RM compute_f(model, B)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mosquito feeding rate for RM model (\\(f\\)) — compute_f.RM","text":"model object make_MicroMoB B vector length p giving total blood host availability patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mosquito feeding rate (\\(f\\)) — compute_f","title":"Compute mosquito feeding rate (\\(f\\)) — compute_f","text":"method dispatches type model$mosquito","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mosquito feeding rate (\\(f\\)) — compute_f","text":"","code":"compute_f(model, B)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mosquito feeding rate (\\(f\\)) — compute_f","text":"model object make_MicroMoB B vector length p giving total blood host availability patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mosquito feeding rate (\\(f\\)) — compute_f","text":"vector length p giving per-capita blood feeding rate mosquitoes patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute null mosquito feeding rate (\\(f\\)) — compute_f.trace","title":"Compute null mosquito feeding rate (\\(f\\)) — compute_f.trace","text":"Compute null mosquito feeding rate (\\(f\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute null mosquito feeding rate (\\(f\\)) — compute_f.trace","text":"","code":"# S3 method for trace compute_f(model, B)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_f.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute null mosquito feeding rate (\\(f\\)) — compute_f.trace","text":"model object make_MicroMoB B vector length p giving total blood host availability patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of eggs laid from oviposition for each patch for RM model — compute_oviposit.RM","title":"Compute number of eggs laid from oviposition for each patch for RM model — compute_oviposit.RM","text":"method returns vector length p.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of eggs laid from oviposition for each patch for RM model — compute_oviposit.RM","text":"","code":"# S3 method for RM compute_oviposit(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of eggs laid from oviposition for each patch for RM model — compute_oviposit.RM","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute number of eggs laid from oviposition for each patch for RM model — compute_oviposit.RM","text":"see compute_oviposit.RM_deterministic compute_oviposit.RM_stochastic","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of eggs laid from oviposition for each patch for deterministic RM model — compute_oviposit.RM_deterministic","title":"Compute number of eggs laid from oviposition for each patch for deterministic RM model — compute_oviposit.RM_deterministic","text":"Compute number eggs laid oviposition patch deterministic RM model","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of eggs laid from oviposition for each patch for deterministic RM model — compute_oviposit.RM_deterministic","text":"","code":"# S3 method for RM_deterministic compute_oviposit(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of eggs laid from oviposition for each patch for deterministic RM model — compute_oviposit.RM_deterministic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of eggs laid from oviposition for each patch for stochastic RM model — compute_oviposit.RM_stochastic","title":"Compute number of eggs laid from oviposition for each patch for stochastic RM model — compute_oviposit.RM_stochastic","text":"Compute number eggs laid oviposition patch stochastic RM model","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of eggs laid from oviposition for each patch for stochastic RM model — compute_oviposit.RM_stochastic","text":"","code":"# S3 method for RM_stochastic compute_oviposit(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.RM_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of eggs laid from oviposition for each patch for stochastic RM model — compute_oviposit.RM_stochastic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","text":"method dispatches type model$mosquito","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","text":"","code":"compute_oviposit(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","text":"vector length p giving total number eggs laid adult mosquitoes patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of eggs laid from oviposition for each patch — compute_oviposit.trace","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit.trace","text":"used modeling emergence trace. method dispatches type model$mosquito","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit.trace","text":"","code":"# S3 method for trace compute_oviposit(model)  # S3 method for trace compute_oviposit(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_oviposit.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit.trace","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"method simply returns q parameter mosquito object, RM model assumes constant fraction blood meals taken human hosts.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"","code":"# S3 method for RM compute_q(model, W, Wd, B)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"model object make_MicroMoB W vector length p giving human availability patch (\\(W\\)) Wd vector length p giving visitor availability patch (\\(W_{\\delta}\\)) B vector length p giving total blood host availability patch (\\(B\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human blood feeding fraction (\\(q\\)) — compute_q","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"method dispatches type model$mosquito","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"","code":"compute_q(model, W, Wd, B)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"model object make_MicroMoB W vector length p giving human availability patch (\\(W\\)) Wd vector length p giving visitor availability patch (\\(W_{\\delta}\\)) B vector length p giving total blood host availability patch (\\(B\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"vector length p giving proportion bites taken human hosts patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute null human blood feeding fraction (\\(q\\)) — compute_q.trace","title":"Compute null human blood feeding fraction (\\(q\\)) — compute_q.trace","text":"Compute null human blood feeding fraction (\\(q\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute null human blood feeding fraction (\\(q\\)) — compute_q.trace","text":"","code":"# S3 method for trace compute_q(model, W, Wd, B)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_q.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute null human blood feeding fraction (\\(q\\)) — compute_q.trace","text":"model object make_MicroMoB W vector length p giving human availability patch (\\(W\\)) Wd vector length p giving visitor availability patch (\\(W_{\\delta}\\)) B vector length p giving total blood host availability patch (\\(B\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.MOI.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human biting weights for MOI model (\\(w_{f}\\)) — compute_wf.MOI","title":"Compute human biting weights for MOI model (\\(w_{f}\\)) — compute_wf.MOI","text":"Compute human biting weights MOI model (\\(w_{f}\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.MOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human biting weights for MOI model (\\(w_{f}\\)) — compute_wf.MOI","text":"","code":"# S3 method for MOI compute_wf(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.MOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human biting weights for MOI model (\\(w_{f}\\)) — compute_wf.MOI","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human biting weights for SIS model (\\(w_{f}\\)) — compute_wf.SIS","title":"Compute human biting weights for SIS model (\\(w_{f}\\)) — compute_wf.SIS","text":"Compute human biting weights SIS model (\\(w_{f}\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human biting weights for SIS model (\\(w_{f}\\)) — compute_wf.SIS","text":"","code":"# S3 method for SIS compute_wf(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human biting weights for SIS model (\\(w_{f}\\)) — compute_wf.SIS","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","title":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","text":"method dispatches type model$human.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","text":"","code":"compute_wf(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_wf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","text":"vector length n giving biting weights human hosts stratum","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.MOI.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness for MOI model (\\(x\\)) — compute_x.MOI","title":"Compute net infectiousness for MOI model (\\(x\\)) — compute_x.MOI","text":"simple MOI (queueing) model (M/M/inf), net infectiousness considered vary increasing MOI. calculated $$c \\cdot (1 - \\frac{X_{0}}{H})$$ \\(X_{0}\\) number uninfected persons (multiplicity infection zero).","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.MOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness for MOI model (\\(x\\)) — compute_x.MOI","text":"","code":"# S3 method for MOI compute_x(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.MOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness for MOI model (\\(x\\)) — compute_x.MOI","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness for SIS model (\\(x\\)) — compute_x.SIS","title":"Compute net infectiousness for SIS model (\\(x\\)) — compute_x.SIS","text":"Compute net infectiousness SIS model (\\(x\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness for SIS model (\\(x\\)) — compute_x.SIS","text":"","code":"# S3 method for SIS compute_x(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness for SIS model (\\(x\\)) — compute_x.SIS","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness of humans (\\(x\\)) — compute_x","title":"Compute net infectiousness of humans (\\(x\\)) — compute_x","text":"Ross-Macdonald style transmission model, computed $$x = c X$$ method dispatches type model$human.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness of humans (\\(x\\)) — compute_x","text":"","code":"compute_x(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness of humans (\\(x\\)) — compute_x","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute net infectiousness of humans (\\(x\\)) — compute_x","text":"vector length n giving net infectiousness human hosts stratum","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_xd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","title":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","text":"method dispatches type model$visitor.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_xd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","text":"","code":"compute_xd(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_xd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_xd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","text":"vector length p giving net infectiousness visitors patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_xd.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness of visitors for trace model (\\(x_{\\delta}\\)) — compute_xd.trace","title":"Compute net infectiousness of visitors for trace model (\\(x_{\\delta}\\)) — compute_xd.trace","text":"Compute net infectiousness visitors trace model (\\(x_{\\delta}\\))","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_xd.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness of visitors for trace model (\\(x_{\\delta}\\)) — compute_xd.trace","text":"","code":"# S3 method for trace compute_xd(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/compute_xd.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness of visitors for trace model (\\(x_{\\delta}\\)) — compute_xd.trace","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/make_MicroMoB.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a model object — make_MicroMoB","title":"Make a model object — make_MicroMoB","text":"model object hashed environment. default contains single list, model$global storing global state.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/make_MicroMoB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a model object — make_MicroMoB","text":"","code":"make_MicroMoB(tmax, p)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/make_MicroMoB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a model object — make_MicroMoB","text":"tmax number days simulate p number places","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/sample_stochastic_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a stochastic matrix — sample_stochastic_matrix","title":"Sample a stochastic matrix — sample_stochastic_matrix","text":"x matrix arbitrary number rows whose columns equal number bins stochastic matrix prob parameterizes distribution . row x gives distribution counts bins resampled according prob. conceptually similar \"stochastically\" distributing matrix x %*% prob, gives expectation.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/sample_stochastic_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a stochastic matrix — sample_stochastic_matrix","text":"","code":"sample_stochastic_matrix(x, prob)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/sample_stochastic_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a stochastic matrix — sample_stochastic_matrix","text":"x matrix prob matrix, must number columns equal number columns x rows sum one","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/sample_stochastic_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a stochastic matrix — sample_stochastic_matrix","text":"matrix whose dimensions equal original x","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/sample_stochastic_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a stochastic vector — sample_stochastic_vector","title":"Sample a stochastic vector — sample_stochastic_vector","text":"Given vector counts cells, x stochastic matrix prob, row describes probability distribution cell distributed among bins, sample destination bins cell count, return vector giving number counts bins. conceptually similar \"stochastically\" distributing vector x %*% prob, gives expectation.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/sample_stochastic_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a stochastic vector — sample_stochastic_vector","text":"","code":"sample_stochastic_vector(x, prob)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/sample_stochastic_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a stochastic vector — sample_stochastic_vector","text":"x vector prob matrix, must number rows equal x rows sum one","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/sample_stochastic_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a stochastic vector — sample_stochastic_vector","text":"vector length equal number columns prob","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_alternative_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup trace driven alternative blood hosts — setup_alternative_trace","title":"Setup trace driven alternative blood hosts — setup_alternative_trace","text":"model complies visitors component interface. adds named list model$alternative.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_alternative_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup trace driven alternative blood hosts — setup_alternative_trace","text":"","code":"setup_alternative_trace(model, O = NULL)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_alternative_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup trace driven alternative blood hosts — setup_alternative_trace","text":"model object make_MicroMoB O time varying trace passed time_patch_varying_parameter NULL set 0 (alternative blood hosts)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_aqua_BH.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup aquatic (immature) mosquito model with Beverton-Holt dynamics — setup_aqua_BH","title":"Setup aquatic (immature) mosquito model with Beverton-Holt dynamics — setup_aqua_BH","text":"single compartment aquatic stages modeled suffers density dependent mortality like Beverton-Holt model.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_aqua_BH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup aquatic (immature) mosquito model with Beverton-Holt dynamics — setup_aqua_BH","text":"","code":"setup_aqua_BH(model, stochastic, molt, surv, K, L)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_aqua_BH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup aquatic (immature) mosquito model with Beverton-Holt dynamics — setup_aqua_BH","text":"model object make_MicroMoB stochastic model update deterministically stochastically? molt proportion immature stages mature emerge adults day (may time patch varying see time_patch_varying_parameter) surv daily survival probability (may time patch varying see time_patch_varying_parameter) K carrying capacity (may time patch varying see time_patch_varying_parameter) L initial number immature mosquitoes","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_aqua_BH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup aquatic (immature) mosquito model with Beverton-Holt dynamics — setup_aqua_BH","text":"parameters can passed either vector length equal p, matrix p rows tmax columns, matrix p rows 365 columns.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_aqua_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup aquatic (immature) mosquito model with trace (forced) emergence — setup_aqua_trace","title":"Setup aquatic (immature) mosquito model with trace (forced) emergence — setup_aqua_trace","text":"Emergence passed (possibly time varying) parameter decoupled adult mosquito dynamics.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_aqua_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup aquatic (immature) mosquito model with trace (forced) emergence — setup_aqua_trace","text":"","code":"setup_aqua_trace(model, lambda, stochastic)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_aqua_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup aquatic (immature) mosquito model with trace (forced) emergence — setup_aqua_trace","text":"model object make_MicroMoB lambda daily emergence mosquitoes, may time patch varying, see time_patch_varying_parameter stochastic model update deterministically stochastically?","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_humans_MOI.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup humans with MOI (multiplicity of infection) pathogen model — setup_humans_MOI","title":"Setup humans with MOI (multiplicity of infection) pathogen model — setup_humans_MOI","text":"queueing model (M/M/inf) superinfection humans.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_humans_MOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup humans with MOI (multiplicity of infection) pathogen model — setup_humans_MOI","text":"","code":"setup_humans_MOI(   model,   stochastic,   theta,   wf = NULL,   H,   MOI,   b = 0.55,   c = 0.15,   r = 1/200,   sigma = 1 )"},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_humans_MOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup humans with MOI (multiplicity of infection) pathogen model — setup_humans_MOI","text":"model object make_MicroMoB stochastic model update deterministically stochastically? theta time spent matrix wf biting weights H vector strata population sizes MOI matrix giving distribution persons across strata (columns) multiplicity infection (rows). b transmission efficiency (mosquito human) c transmission efficiency (human mosquito) r recovery rate (inverse infectious duration) sigma control non-independence pathogen clearance; sigma > 1 indicates competition (clearance faster independent) sigma < 1 indicates facilitation (clearance slower independent).","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_humans_SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup humans with SIS pathogen model — setup_humans_SIS","title":"Setup humans with SIS pathogen model — setup_humans_SIS","text":"simple SIS model","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_humans_SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup humans with SIS pathogen model — setup_humans_SIS","text":"","code":"setup_humans_SIS(   model,   stochastic,   theta,   wf = NULL,   H,   X,   b = 0.55,   c = 0.15,   r = 1/200 )"},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_humans_SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup humans with SIS pathogen model — setup_humans_SIS","text":"model object make_MicroMoB stochastic model update deterministically stochastically? theta time spent matrix wf biting weights H vector strata population sizes X number infectious persons strata b transmission efficiency (mosquito human) c transmission efficiency (human mosquito) r recovery rate (inverse infectious duration)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_mosquito_RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup generalized Ross-Macdonald mosquito model — setup_mosquito_RM","title":"Setup generalized Ross-Macdonald mosquito model — setup_mosquito_RM","text":"generalized RM model allows time varying EIP survival probability. complies mosquito component interface, may simulated deterministically stochastically.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_mosquito_RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup generalized Ross-Macdonald mosquito model — setup_mosquito_RM","text":"","code":"setup_mosquito_RM(   model,   stochastic,   f = 0.3,   q = 0.9,   eip,   p,   psi,   nu = 25,   M,   Y,   Z )"},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_mosquito_RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup generalized Ross-Macdonald mosquito model — setup_mosquito_RM","text":"model object make_MicroMoB stochastic model update deterministically stochastically? f blood feeding rate q human blood feeding fraction eip Extrinsic Incubation Period, may time varying, see time_varying_parameter p daily survival probability, may time varying, see time_varying_parameter psi mosquito dispersal matrix (rows must sum 1) nu number eggs laid per oviposition M total mosquito density per patch (vector length p) Y density incubating mosquitoes per patch (vector length p) Z density infectious mosquitoes per patch (vector length p)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_mosquito_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup null mosquito model — setup_mosquito_trace","title":"Setup null mosquito model — setup_mosquito_trace","text":"null model mosquito dynamics testing/verifying aquatic models. implements single method compute_oviposit.trace methods throw error.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_mosquito_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup null mosquito model — setup_mosquito_trace","text":"","code":"setup_mosquito_trace(model, oviposit)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_mosquito_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup null mosquito model — setup_mosquito_trace","text":"model object make_MicroMoB oviposit vector length p used return value compute_oviposit","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_visitor_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup trace driven visitors — setup_visitor_trace","title":"Setup trace driven visitors — setup_visitor_trace","text":"model complies visitors component interface. adds named list model$visitor.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_visitor_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup trace driven visitors — setup_visitor_trace","text":"","code":"setup_visitor_trace(model, Wd = NULL, xd = NULL)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/setup_visitor_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup trace driven visitors — setup_visitor_trace","text":"model object make_MicroMoB Wd time varying trace visitor host availability passed time_patch_varying_parameter NULL set 0 (visitors) xd time varying trace visitor net infectiousness passed time_patch_varying_parameter NULL set 0 (visitors)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH.html","id":null,"dir":"Reference","previous_headings":"","what":"Update aquatic (immature) mosquito populations for Beverton-Holt dynamics — step_aqua.BH","title":"Update aquatic (immature) mosquito populations for Beverton-Holt dynamics — step_aqua.BH","text":"function dispatches second class attribute model$aqua stochastic deterministic behavior.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update aquatic (immature) mosquito populations for Beverton-Holt dynamics — step_aqua.BH","text":"","code":"# S3 method for BH step_aqua(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update aquatic (immature) mosquito populations for Beverton-Holt dynamics — step_aqua.BH","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update aquatic (immature) mosquito populations for deterministic Beverton-Holt dynamics — step_aqua.BH_deterministic","title":"Update aquatic (immature) mosquito populations for deterministic Beverton-Holt dynamics — step_aqua.BH_deterministic","text":"Run deterministic state update.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update aquatic (immature) mosquito populations for deterministic Beverton-Holt dynamics — step_aqua.BH_deterministic","text":"","code":"# S3 method for BH_deterministic step_aqua(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update aquatic (immature) mosquito populations for deterministic Beverton-Holt dynamics — step_aqua.BH_deterministic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update aquatic (immature) mosquito populations for stochastic Beverton-Holt dynamics — step_aqua.BH_stochastic","title":"Update aquatic (immature) mosquito populations for stochastic Beverton-Holt dynamics — step_aqua.BH_stochastic","text":"Run stochastic state update.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update aquatic (immature) mosquito populations for stochastic Beverton-Holt dynamics — step_aqua.BH_stochastic","text":"","code":"# S3 method for BH_stochastic step_aqua(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.BH_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update aquatic (immature) mosquito populations for stochastic Beverton-Holt dynamics — step_aqua.BH_stochastic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.html","id":null,"dir":"Reference","previous_headings":"","what":"Update aquatic (immature) mosquito populations — step_aqua","title":"Update aquatic (immature) mosquito populations — step_aqua","text":"method dispatches type model$aqua","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update aquatic (immature) mosquito populations — step_aqua","text":"","code":"step_aqua(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update aquatic (immature) mosquito populations — step_aqua","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Update aquatic (immature) mosquito populations for forced emergence — step_aqua.trace","title":"Update aquatic (immature) mosquito populations for forced emergence — step_aqua.trace","text":"function nothing trace models endogenous dynamics.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update aquatic (immature) mosquito populations for forced emergence — step_aqua.trace","text":"","code":"# S3 method for trace step_aqua(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_aqua.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update aquatic (immature) mosquito populations for forced emergence — step_aqua.trace","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI.html","id":null,"dir":"Reference","previous_headings":"","what":"Update MOI human model — step_humans.MOI","title":"Update MOI human model — step_humans.MOI","text":"Update MOI human model","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update MOI human model — step_humans.MOI","text":"","code":"# S3 method for MOI step_humans(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update MOI human model — step_humans.MOI","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update MOI human model (deterministic) — step_humans.MOI_deterministic","title":"Update MOI human model (deterministic) — step_humans.MOI_deterministic","text":"Update MOI human model (deterministic)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update MOI human model (deterministic) — step_humans.MOI_deterministic","text":"","code":"# S3 method for MOI_deterministic step_humans(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update MOI human model (deterministic) — step_humans.MOI_deterministic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update MOI human model (stochastic) — step_humans.MOI_stochastic","title":"Update MOI human model (stochastic) — step_humans.MOI_stochastic","text":"Update MOI human model (stochastic)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update MOI human model (stochastic) — step_humans.MOI_stochastic","text":"","code":"# S3 method for MOI_stochastic step_humans(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.MOI_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update MOI human model (stochastic) — step_humans.MOI_stochastic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIS human model — step_humans.SIS","title":"Update SIS human model — step_humans.SIS","text":"Update SIS human model","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIS human model — step_humans.SIS","text":"","code":"# S3 method for SIS step_humans(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIS human model — step_humans.SIS","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIS human model (deterministic) — step_humans.SIS_deterministic","title":"Update SIS human model (deterministic) — step_humans.SIS_deterministic","text":"Update SIS human model (deterministic)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIS human model (deterministic) — step_humans.SIS_deterministic","text":"","code":"# S3 method for SIS_deterministic step_humans(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIS human model (deterministic) — step_humans.SIS_deterministic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIS human model (stochastic) — step_humans.SIS_stochastic","title":"Update SIS human model (stochastic) — step_humans.SIS_stochastic","text":"Update SIS human model (stochastic)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIS human model (stochastic) — step_humans.SIS_stochastic","text":"","code":"# S3 method for SIS_stochastic step_humans(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.SIS_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIS human model (stochastic) — step_humans.SIS_stochastic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.html","id":null,"dir":"Reference","previous_headings":"","what":"Update human population — step_humans","title":"Update human population — step_humans","text":"method dispatches type model$human.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update human population — step_humans","text":"","code":"step_humans(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_humans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update human population — step_humans","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","title":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","text":"function dispatches second argument model$mosquito stochastic deterministic behavior.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","text":"","code":"# S3 method for RM step_mosquitoes(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","text":"see step_mosquitoes.RM_deterministic step_mosquitoes.RM_stochastic","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Ross-Macdonald mosquitoes (deterministic) — step_mosquitoes.RM_deterministic","title":"Update Ross-Macdonald mosquitoes (deterministic) — step_mosquitoes.RM_deterministic","text":"Update Ross-Macdonald mosquitoes (deterministic)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Ross-Macdonald mosquitoes (deterministic) — step_mosquitoes.RM_deterministic","text":"","code":"# S3 method for RM_deterministic step_mosquitoes(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Ross-Macdonald mosquitoes (deterministic) — step_mosquitoes.RM_deterministic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Ross-Macdonald mosquitoes (stochastic) — step_mosquitoes.RM_stochastic","title":"Update Ross-Macdonald mosquitoes (stochastic) — step_mosquitoes.RM_stochastic","text":"Update Ross-Macdonald mosquitoes (stochastic)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Ross-Macdonald mosquitoes (stochastic) — step_mosquitoes.RM_stochastic","text":"","code":"# S3 method for RM_stochastic step_mosquitoes(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.RM_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Ross-Macdonald mosquitoes (stochastic) — step_mosquitoes.RM_stochastic","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.html","id":null,"dir":"Reference","previous_headings":"","what":"Update mosquito population — step_mosquitoes","title":"Update mosquito population — step_mosquitoes","text":"method dispatches type model$mosquito","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update mosquito population — step_mosquitoes","text":"","code":"step_mosquitoes(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update mosquito population — step_mosquitoes","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Update null mosquito population — step_mosquitoes.trace","title":"Update null mosquito population — step_mosquitoes.trace","text":"Update null mosquito population","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update null mosquito population — step_mosquitoes.trace","text":"","code":"# S3 method for trace step_mosquitoes(model)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/step_mosquitoes.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update null mosquito population — step_mosquitoes.trace","text":"model object make_MicroMoB","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for lumped population strata (counts) — strata_to_residency_counts","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"input given matrix population counts per strata (columns) patch (rows), function calculates residency matrix population size overall stratification residency strata.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"","code":"strata_to_residency_counts(H_counts)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"H_counts matrix population counts","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"list three elements: J: residency matrix mapping elements H patches H: overall population distribution strata patches","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"","code":"# taken from package tests J <- matrix(    c(0.3, 0.5, 0.2,    0.1, 0.6, 0.3), nrow = 3, ncol = 2, byrow = FALSE ) H <- c(50, 60) H_overall <- J %*% diag(H) residency <- strata_to_residency_proportion(H_strata = H, J_strata = J)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"input given vector population sizes per-strata, lumped patches, separate matrix whose columns describe strata distributed patches, function calculates residency matrix population size overall stratification residency strata.","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"","code":"strata_to_residency_proportion(H_strata, J_strata)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"H_strata vector population size strata J_strata matrix whose columns sum one giving distribution strata (columns) populations patches (rows)","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"list three elements: assignment_indices: provides mapping patch (rows) strata (columns) \"unrolled\" vector H J: residency matrix mapping elements H patches H: overall population distribution strata patches","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/strata_to_residency_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"","code":"# taken from package tests J <- matrix(    c(0.3, 0.5, 0.2,    0.1, 0.6, 0.3), nrow = 3, ncol = 2, byrow = FALSE ) H <- c(50, 60) # get the overall assignment of strata (cols) across patches (rows) H_overall <- J %*% diag(H) residency <- strata_to_residency_proportion(H_strata = H, J_strata = J)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/time_patch_varying_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Input parameters that may vary by time and patch — time_patch_varying_parameter","title":"Input parameters that may vary by time and patch — time_patch_varying_parameter","text":"Input parameters may vary time patch","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/time_patch_varying_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input parameters that may vary by time and patch — time_patch_varying_parameter","text":"","code":"time_patch_varying_parameter(param, p, tmax)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/time_patch_varying_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input parameters that may vary by time and patch — time_patch_varying_parameter","text":"param given matrix, must nrows equal p ncols equal either tmax 365; given vector must length p, tmax, 365. p number patches tmax number time steps","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/time_varying_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Input parameters that may vary by time — time_varying_parameter","title":"Input parameters that may vary by time — time_varying_parameter","text":"Input parameters may vary time","code":""},{"path":"https://dd-harp.github.io/MicroMoB/reference/time_varying_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input parameters that may vary by time — time_varying_parameter","text":"","code":"time_varying_parameter(param, tmax)"},{"path":"https://dd-harp.github.io/MicroMoB/reference/time_varying_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input parameters that may vary by time — time_varying_parameter","text":"param vector length 1, tmax, 365. tmax number time steps","code":""},{"path":"https://dd-harp.github.io/MicroMoB/news/index.html","id":"micromob-003","dir":"Changelog","previous_headings":"","what":"MicroMoB 0.0.3","title":"MicroMoB 0.0.3","text":"add Code Conduct improvements vignettes (bloodmeal.Rmd MicroMoB.Rmd) improvements function reference page","code":""},{"path":"https://dd-harp.github.io/MicroMoB/news/index.html","id":"micromob-002","dir":"Changelog","previous_headings":"","what":"MicroMoB 0.0.2","title":"MicroMoB 0.0.2","text":"initial release minimum viable product: https://github.com/dd-harp/MicroMoB/issues/28","code":""}]
