[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 MicroMoB authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Contributing.html","id":"issues","dir":"Articles","previous_headings":"","what":"Issues","title":"Contributing","text":"find bug, question use feature sufficient documentation, suggestion improvement, please leave issue GitHub repo. bug reports please include: Micro-MoB version Operating System R version Steps recreate Expected behaviour Actual behaviour","code":""},{"path":"/articles/Contributing.html","id":"git","dir":"Articles","previous_headings":"","what":"Git","title":"Contributing","text":"use Git project. means use main, dev, feat/*, bug/*, hotfix/* branches. Please refer post information type branch. main: branch always stores last “production” release software, protected branch. pull request submitted main unless dev, meaning software version updated. dev: pull requests users made dev branch. branch protected deletion. feat: new significantly enhanced features made feat branches merged dev. feat/* branch merged dev, can deleted. bug: branches fix bugs, usually raised issue. bug/* branch merged dev, can deleted. hotfix: difference bug/* hotfix/* branch hotfix small quick fixes (misspellings, incorrect arguments, etc.) short-lived. merged dev, can deleted. periodically merge dev master small release updates. releases appear GitHub releases page.","code":""},{"path":"/articles/Contributing.html","id":"continuous-integration","dir":"Articles","previous_headings":"","what":"Continuous integration","title":"Contributing","text":"use GitHub Actions continuous integration platform run workflows. workflows use r-lib/actions R packages. run three types workflows. R CMD check runs pull request [main, dev] branches. Test coverage runs pull requests [main, dev] uses codecov.io integration checking test coverage. Finally, pkgdown runs pushes main, occur dev merged main periodically. Please note sometimes hard diagnose bugs can due date workflows. find strange unusual bug pushing branch, one thing consider checking.","code":""},{"path":"/articles/Contributing.html","id":"pull-requests","dir":"Articles","previous_headings":"","what":"Pull Requests","title":"Contributing","text":"making pull request, please use dev base branch. adding new feature (.e. pull feat/* branch), please ensure added minimal tests using testthat functionality feature can tested.","code":""},{"path":"/articles/Micro-MoB.html","id":"design-considerations","dir":"Articles","previous_headings":"","what":"Design considerations","title":"Micro-MoB","text":"way Micro-MoB work means single dispatch sufficient update model.","code":""},{"path":"/articles/Micro-MoB.html","id":"human-population-strata-rhuman-r","dir":"Articles","previous_headings":"Design considerations","what":"Human population strata R/human.R","title":"Micro-MoB","text":"Spatial Dynamics : \\[\\begin{equation} P = J \\cdot H \\end{equation}\\] software assume user provides J, H making human object setup_human. working complex strata, helper function strata_to_residency can generate suitable J matrix. \\(p\\) patches \\(n\\) strata. general, \\(n \\geq p\\) may multiple strata patch residency (e.g. young, middle-aged, old). \\(n > p\\) number demographic strata summing patches \\(s = n/p\\). call \\(s\\) demographic strata, \\(n\\) strata. 2 demographic strata 3 patches, n = 6. dimensions follows: \\(P_{p\\times 1}\\): vector human populations patch (strata) \\(J_{p\\times n}\\): residency matrix mapping strata patch \\(H_{n\\times 1}\\): vector human populations (strata)","code":""},{"path":"/articles/Micro-MoB.html","id":"human-mobility-time-spent","dir":"Articles","previous_headings":"Design considerations","what":"Human mobility time spent","title":"Micro-MoB","text":"time spent matrix fulfills following constraint: \\[\\begin{equation} \\sum_j \\Theta_{,j} \\leq 1 \\end{equation}\\] time spent matrix dimension \\(\\Theta_{n\\times p}\\). software uses setup.timespent assign \\(\\Theta\\) model object. can either single matrix list matrices modeling fractions day.","code":""},{"path":[]},{"path":"/articles/Micro-MoB.html","id":"time-at-risk-rtime_spent-r","dir":"Articles","previous_headings":"Design considerations","what":"Time at risk R/time_spent.R","title":"Micro-MoB","text":"Spatial dynamics : \\[ \\int_{0}^1 \\xi(s) ds=1 \\] \\(\\xi\\) normalized 1, probability density. gives probability time day mosquito initiates blood feeding attempt (including search), conditional mosquito attempting blood feed day. software, smallest fraction time modeled day, vaculously equal 1, says, mosquito attempts blood feed today, probability 1, start attempt today. Otherwise, Xi vector sums 1, giving probability block. time risk (TaR) matrix, \\(\\Psi\\) : \\[ \\Psi(t) = \\Theta(t) \\xi(t) \\] software, compute_Psi.timespent computes \\(\\Psi^{T}\\) dispatches based daily sub-daily model time spent. scalar times Theta, dimensions \\(\\Psi_{n\\times p}\\).","code":""},{"path":"/articles/Micro-MoB.html","id":"human-availability-rtime_spent-r","dir":"Articles","previous_headings":"Design considerations","what":"Human availability R/time_spent.R","title":"Micro-MoB","text":"Human availability vector-centric concept. something akin giving expectation number persons available bitten patch, additional multiplication \\(\\xi\\) means weighted probability mosquito initiate search time \\(t\\). Also \\(w_{f,n\\times 1}\\) vector search weights. \\[ W(t) = \\Psi(t)^T \\cdot w_f H \\] vector dimension \\(W_{p\\times 1}\\). function compute_wf.biteweight computes w_f, vector biting weights, used compute_W.timespent computes W.","code":""},{"path":"/articles/Micro-MoB.html","id":"other-blood-hosts-rother_hosts-r","dir":"Articles","previous_headings":"","what":"Other blood hosts R/other_hosts.R","title":"Micro-MoB","text":"vertebrate mammals may provide bloodmeals mosquitoes. vector, \\(B(t)_{p\\times 1}\\) giving biting weight (expected number hosts weighted search weight). compute_B.otherhosts computes vector.","code":""},{"path":[]},{"path":[]},{"path":"/articles/Micro-MoB.html","id":"the-biting-distribution-matrix","dir":"Articles","previous_headings":"Other blood hosts R/other_hosts.R","what":"The biting distribution matrix","title":"Micro-MoB","text":"biting distribution matrix must obey following constraint colSums(diag(par$H) %*% par$beta) = 1.","code":""},{"path":"/articles/Micro-MoB.html","id":"net-infectiousness-of-humans-kappa","dir":"Articles","previous_headings":"Other blood hosts R/other_hosts.R","what":"Net infectiousness of humans \\(\\kappa\\)","title":"Micro-MoB","text":"standard Ross-Macdonald model, force infection mosquitoes \\(acx\\) \\(x = X/H\\) prevalence disease humans, \\(= fq\\) human feeding rate, \\(c\\) transmission efficiency. , know \\(\\kappa\\) part referring net infectiousness human host population, proportion bites humans infect mosquito. Micro-MoB RM-Spatial ’s calculated like : \\[ \\kappa_{p\\times 1} = \\upsilon_{p\\times 1} (\\beta_{p\\times n}^{\\intercal} x_{n\\times1}) + (1 - \\upsilon_{p\\times 1})x_{\\delta_{p\\times 1}} \\] , \\(\\upsilon_{p\\times 1}\\) resident fraction patch, \\(x_{\\delta_{p\\times 1}}\\) net infectiousness visitors, \\(\\beta_{n\\times p}\\) biting distribution matrix. order try sync models, lets examine \\(\\beta\\) made: \\[ \\beta_{n\\times p} = \\mbox{diag}(w_{f})_{n\\times n} \\cdot \\Psi_{n\\times p} \\cdot \\mbox{diag}(1/W)_{p\\times p} \\] \\(W_{p\\times 1} = \\Psi^{\\intercal}_{p\\times n} \\cdot w_{f}H_{n\\times 1}\\) available human population, \\(\\Psi = \\Theta \\xi\\) time risk matrix, \\(w_{f}\\) biting weights. line simple \\(\\kappa\\) RM model, let’s assume 1 patch, 1 strata, biting weight \\(1\\). assume visitors, \\(\\upsilon = 1\\). looks like new \\(\\kappa\\) , fact precisely factor \\(1/H\\), suspected: \\(\\beta\\) simplifies \\(1/H\\). new computation \\(\\kappa\\) extra term \\(1/H\\) extraneous: \\[ \\beta = 1 \\cdot (1) \\cdot (1/H) \\\\ \\kappa = (1/H) cx = (1/H)c(/H) \\]","code":"H <- 100 I <- 20 c <- 0.15 X <- I/H  kappa <- c * X kappa #> [1] 0.03 Theta <- matrix(1, nrow = 1, ncol = 1) Psi <- Theta * 1 w_f <- 1 W <- t(Psi) %*% (w_f * H)  beta <- diag(w_f) %*% Psi %*% diag(1/W)  x <- c * X  kappa_new <- t(beta) %*% (x) kappa_new #>       [,1] #> [1,] 3e-04 kappa_new * H #>      [,1] #> [1,] 0.03"},{"path":"/articles/RM_mosquito.html","id":"deterministic-model","dir":"Articles","previous_headings":"","what":"Deterministic model","title":"Ross-Macdonald mosquito model","text":"deterministic model following form: \\[\\begin{equation} Y_{0} = \\kappa_{t} (M_{t} - Y_{t})  \\\\ M_{t+1} = (pM_{t} + \\lambda_{t}) \\cdot \\psi \\\\ Y_{t+1} = p(Y_{t} + Y_{0}) \\cdot \\psi \\\\ Z_{t+1} = (pZ_{t} \\cdot \\psi) + (\\kappa_{t-EIP} (M_{t-EIP} - Y_{t-EIP}) p^{EIP} \\cdot \\psi^{EIP}) \\end{equation}\\] minor difference code, EIP forward-looking rather backwards. also note \\(p\\) allowed time-varying, even though represented constant. \\(\\kappa\\) passed mosquito component every day parameter, net infectiousness hosts mosquitoes (probability mosquito become infected biting random blood host). \\(\\lambda_{t}\\) number newly emerging adults day. calculated aquatic (immature) component passed mosquito component parameter.","code":""},{"path":"/articles/RM_mosquito.html","id":"stochastic-model","dir":"Articles","previous_headings":"","what":"Stochastic model","title":"Ross-Macdonald mosquito model","text":"stochastic model deterministic one survival probabilities used binomial draws (hypergeometric draws nested sampling), \\(\\psi\\) parameterizes multinomial draw destination places/patches mosquitoes leaving home place. stochastic model designed care appropriately tested make sure draw inconsistent event histories mosquitoes (e.g. sampling survival twice mosquitoes compartment).","code":""},{"path":"/articles/RM_mosquito.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Ross-Macdonald mosquito model","text":"Let’s example. ’ll need set aquatic mosquito components. example run three years. make \\(\\lambda\\) vector giving emergence patch, day year, peaking middle year 100 mosquitoes emerging per day, per patch. also assume daily survival p sinsuoidal, period 365 days. let EIP constant 5 days. also set \\(\\kappa = 0.05\\) day.","code":"tmax <- 365 * 3 p <- 3  lambda <- dnorm(x = 1:365, mean = 180, sd = 90) lambda <- lambda * (100/max(lambda)) lambda <- t(replicate(p, lambda))  psurv <- (sin((1:365)/365*2*pi) + 1.01)/2 * 0.9  EIP <- 5  f <- 0.3 q <- 1 psi <- matrix(   c(     0.9, 0.05, 0.05,     0.05, 0.9, 0.05,     0.05, 0.05, 0.9   ), nrow = 3, ncol = 3,    byrow = TRUE )   par(mar = c(5,5,2,5)) plot(lambda[1, ], type = \"l\", col = \"red\", xlab = \"Day\", ylab = \"Lambda (red)\") par(new = TRUE) plot(psurv, type = \"l\", axes = F, xlab = NA, ylab = NA, col = \"blue\") axis(side = 4) mtext(side = 4, line = 3, 'Survival Probability (blue)')"},{"path":"/articles/RM_mosquito.html","id":"deterministic-simulation","dir":"Articles","previous_headings":"Example","what":"Deterministic simulation","title":"Ross-Macdonald mosquito model","text":"Now can set models. Let’s first deterministic simulation. use setup_mosquito_RM setup RM mosquito model mosquito component, setup_aqua_trace set aquatic (immature) component simple trace (forced) model.","code":"M <- c(100, 100, 100) Y <- c(0, 0, 0) Z <- c(0, 0, 0)  mod <- make_MicroMoB(tmax = tmax, p = 3) setup_mosquito_RM(mod, stochastic = FALSE, f = f, q = q, eip = EIP, p = psurv, psi = psi, M = M, Y = Y, Z = Z) setup_aqua_trace(model = mod, lambda = lambda, stochastic = FALSE)  M_det <- matrix(data = 0, nrow = tmax, ncol = 3) Y_det <- matrix(data = 0, nrow = tmax, ncol = 3) Z_det <- matrix(data = 0, nrow = tmax, ncol = 3)  # run it while(mod$global$tnow <= tmax) {   mod$mosquito$kappa <- rep(0.05, 3)   step_aqua(model = mod)   step_mosquitoes(model = mod)   M_det[mod$global$tnow, ] <- mod$mosquito$M   Y_det[mod$global$tnow, ] <- mod$mosquito$Y   Z_det[mod$global$tnow, ] <- mod$mosquito$Z   mod$global$tnow <- mod$global$tnow + 1L }  det_out <- as.data.table(rbind(M_det, Y_det, Z_det))  det_out[, \"Day\" := as.integer(rep(1:tmax, 3))] det_out[, \"Compartment\" := rep(c(\"M\", \"Y\", \"Z\"), times = rep(tmax, 3))] det_out <- melt(det_out, id.vars = c(\"Day\", \"Compartment\"), variable.name = \"Patch\", value.name = \"Count\") det_out[, \"Patch\" := as.integer(Patch)]  ggplot(det_out) +     geom_line(aes(x = Day, y = Count, color = Compartment)) +     facet_grid(Patch ~ .)"},{"path":"/articles/RM_mosquito.html","id":"stochastic-simulation","dir":"Articles","previous_headings":"Example","what":"Stochastic simulation","title":"Ross-Macdonald mosquito model","text":"Now run 10 stochastic simulations, using parameters.","code":"sto_out <- mclapply(X = 1:10, FUN = function(runid) {      mod <- make_MicroMoB(tmax = tmax, p = 3)   setup_mosquito_RM(mod, stochastic = TRUE, f = f, q = q, eip = EIP, p = psurv, psi = psi, M = M, Y = Y, Z = Z)   setup_aqua_trace(model = mod, lambda = lambda, stochastic = TRUE)      M_out <- as.data.frame(matrix(data = 0, nrow = tmax, ncol = 3))   Y_out <- as.data.frame(matrix(data = 0, nrow = tmax, ncol = 3))   Z_out <- as.data.frame(matrix(data = 0, nrow = tmax, ncol = 3))      # run it   while(mod$global$tnow <= tmax) {     mod$mosquito$kappa <- rep(0.05, 3)     step_aqua(model = mod)     step_mosquitoes(model = mod)     M_out[mod$global$tnow, ] <- mod$mosquito$M     Y_out[mod$global$tnow, ] <- mod$mosquito$Y     Z_out[mod$global$tnow, ] <- mod$mosquito$Z     mod$global$tnow <- mod$global$tnow + 1L   }      out <- as.data.table(rbind(M_out, Y_out, Z_out))   out[, \"Day\" := as.integer(rep(1:tmax, 3))]   out[, \"Compartment\" := rep(c(\"M\", \"Y\", \"Z\"), times = rep(tmax, 3))]   out <- melt(out, id.vars = c(\"Day\", \"Compartment\"), variable.name = \"Patch\", value.name = \"Count\")   out[, \"Patch\" := as.integer(Patch)]   out[, \"Run\" := as.integer(runid)]      return(out) })  sto_out <- do.call(rbind, sto_out)  ggplot(sto_out) +     geom_line(aes(x = Day, y = Count, color = Compartment, group = interaction(Run, Compartment)), alpha = 0.35) +     facet_grid(Patch ~ .)"},{"path":"/articles/RM_transmission.html","id":"endemic-equilibrium-solution","dir":"Articles","previous_headings":"","what":"Endemic equilibrium solution","title":"Ross-Macdonald transmission model","text":"First write closest approximating ODE model derive endemic equilibrium check discrete time models approximately correct. Let human component described : \\[\\begin{equation} \\dot{S} = -b fqZ (1/N) S + rI \\\\ \\dot{} = b fqZ (1/N) S - rI \\end{equation}\\] , \\(fqZ\\) EIR, \\(N\\) total human population size. know values \\(S\\) \\(\\) can solve density infectious mosquitoes required give values endemic equilibrium: \\[\\begin{equation}   Z = \\frac{rIN}{bfqS} \\end{equation}\\] Now let us look system ODEs describing mosquitoes. Actually delay differential equations (DDE) incorporate delay infection infectiousness: \\[\\begin{equation}   \\dot{M} = \\lambda - gM \\\\   \\dot{Y} = fq\\kappa (M-Y) - gY \\\\   \\dot{Z} = fq\\kappa_{t-EIP} (M_{t-EIP} - Y_{t-EIP}) e^{-gEIP} - gZ \\end{equation}\\] interested equilibrium solutions, derivatives zero state variables time, can ignore delays: \\[\\begin{equation}   0 = \\lambda - gM \\\\   0 = fq\\kappa (M-Y) - gY \\\\   0 = fq\\kappa (M - Y) e^{-gEIP} - gZ \\end{equation}\\] Plug solution \\(Z\\) last equation get expression \\(M-Y\\) terms known quantities: \\[\\begin{equation} M-Y = \\frac{gZ}{fq\\kappa e^{-gEIP}} \\end{equation}\\] Now plug \\(M-Y\\) second equation get expression \\(Y\\), simplification get: \\[\\begin{equation}   Y = \\frac{Z}{e^{-gEIP}} \\end{equation}\\] get \\(M\\), add \\((M-Y) + Y\\) simplify get: \\[\\begin{equation} M = \\frac{Z(g + fq\\kappa)}{fq\\kappa e^{-gEIP}} \\end{equation}\\] Finally plug first equation solve \\(\\lambda\\): \\[\\begin{equation}   \\lambda = g \\left( \\frac{Z(g + fq\\kappa)}{fq\\kappa e^{-gEIP}} \\right) \\end{equation}\\] can set model parameters calculate numeric solutions values.","code":"# mosquito parameters f <- 0.3 q <- 1 eip <- 14 EIP <- eip + 1  lifespan <- 20 g <- 1/lifespan  # human parameters b <- 0.55 c <- 0.15 r <- 1/200  S <- 1e3 I <- 300 N <- S + I  # transmission parameters kappa <- (I/N)*c  # equilibrium solutions Z <- (r*I*N) / (b*f*q*S) Y <- Z / exp(-g*EIP) M <- (Z*(g + (f*q*kappa))) / (f*q*kappa*exp(-g*EIP)) lambda <- g*M"},{"path":"/articles/RM_transmission.html","id":"micromob-simulation","dir":"Articles","previous_headings":"","what":"MicroMoB simulation","title":"Ross-Macdonald transmission model","text":"Now let’s set simulation single patch single human stratum. first run deterministic simulation.  Now draw 10 trajectories stochastic simulation, plot output.","code":"patches <- 1 nstrata <- 1 tmax <- 365 * 3  # human parameters theta <- diag(nstrata) H <- N X <- I  # mosquito parameters p <- 1 - 1/lifespan psi <- diag(patches) mod <- make_MicroMoB(tmax = tmax, p = patches) setup_humans_SIS(mod, stochastic = FALSE, theta = theta, H = H, X = X, b = b, c = c, r = r) setup_aqua_trace(mod, stochastic = FALSE, lambda = lambda) setup_mosquito_RM(mod, stochastic = FALSE, f = f, q = q, eip = eip, p = p, psi = psi, M = M, Y = Y, Z = Z) setup_alternative_trace(mod) setup_visitor_trace(mod)  # matrices to hold output mosquito_out <- matrix(data = 0, nrow = tmax, ncol = 4, dimnames = list(NULL, c(\"Day\", \"M\", \"Y\", \"Z\"))) mosquito_out[, \"Day\"] <- 1:tmax human_out <- matrix(data = 0, nrow = tmax, ncol = 3, dimnames = list(NULL, c(\"Day\", \"S\", \"I\"))) human_out[, \"Day\"] <- 1:tmax  # run it while (mod$global$tnow <= tmax) {   compute_bloodmeal(model = mod)   step_aqua(model = mod)   step_mosquitoes(model = mod)   step_humans(model = mod)   mosquito_out[mod$global$tnow, 2:4] <- c(mod$mosquito$M, mod$mosquito$Y, mod$mosquito$Z)   human_out[mod$global$tnow, 2:3] <- c(mod$human$H - mod$human$X, mod$human$X)   mod$global$tnow <- mod$global$tnow + 1L }  mosquito_out <- as.data.table(mosquito_out) mosquito_out <- melt(mosquito_out, id.vars = \"Day\", variable.name = \"Compartment\", value.name = \"Count\") mosquito_out[, \"Species\" := \"Mosquito\"] human_out <- as.data.table(human_out) human_out <- melt(human_out, id.vars = \"Day\", variable.name = \"Compartment\", value.name = \"Count\") human_out[, \"Species\" := \"Human\"]  det_out <- rbind(mosquito_out, human_out)  ggplot(det_out) +     geom_line(aes(x = Day, y = Count, color = Compartment)) +     facet_wrap(. ~ Species, scales = \"free\") sto_out <- mclapply(X = 1:10, FUN = function(runid) {      mod <- make_MicroMoB(tmax = tmax, p = patches)   setup_humans_SIS(mod, stochastic = TRUE, theta = theta, H = H, X = X, b = b, c = c, r = r)   setup_aqua_trace(mod, stochastic = TRUE, lambda = lambda)   setup_mosquito_RM(mod, stochastic = TRUE, f = f, q = q, eip = eip, p = p, psi = psi, M = M, Y = Y, Z = Z)   setup_alternative_trace(mod)   setup_visitor_trace(mod)      # matrices to hold output   mosquito_out <- matrix(data = 0, nrow = tmax, ncol = 4, dimnames = list(NULL, c(\"Day\", \"M\", \"Y\", \"Z\")))   mosquito_out[, \"Day\"] <- 1:tmax   human_out <- matrix(data = 0, nrow = tmax, ncol = 3, dimnames = list(NULL, c(\"Day\", \"S\", \"I\")))   human_out[, \"Day\"] <- 1:tmax      # run it   while (mod$global$tnow <= tmax) {     compute_bloodmeal(model = mod)     step_aqua(model = mod)     step_mosquitoes(model = mod)     step_humans(model = mod)     mosquito_out[mod$global$tnow, 2:4] <- c(mod$mosquito$M, mod$mosquito$Y, mod$mosquito$Z)     human_out[mod$global$tnow, 2:3] <- c(mod$human$H - mod$human$X, mod$human$X)     mod$global$tnow <- mod$global$tnow + 1L   }      mosquito_out <- as.data.table(mosquito_out)   mosquito_out <- melt(mosquito_out, id.vars = \"Day\", variable.name = \"Compartment\", value.name = \"Count\")   mosquito_out[, \"Species\" := \"Mosquito\"]   human_out <- as.data.table(human_out)   human_out <- melt(human_out, id.vars = \"Day\", variable.name = \"Compartment\", value.name = \"Count\")   human_out[, \"Species\" := \"Human\"]      out <- rbind(mosquito_out, human_out)   out[, \"Run\" := as.integer(runid)]      return(out) })  sto_out <- do.call(rbind, sto_out)  ggplot(sto_out) +     geom_line(aes(x = Day, y = Count, color = Compartment, group = interaction(Run, Compartment)), alpha = 0.35) +     facet_wrap(. ~ Species, scales = \"free\")"},{"path":"/articles/key-themes.html","id":"data-provenance","dir":"Articles","previous_headings":"","what":"Data provenance","title":"key-themes","text":"clear external input data gets turned parameters used Micro-MoB simulation. Specifically, define tree structure data leaves mutually exclusive (e.g.; entomology, vector control, human movement, drug treatment, etc), know data structure function leaves use. important lets us figure changes data changes.","code":""},{"path":"/articles/key-themes.html","id":"model-structure","dir":"Articles","previous_headings":"","what":"Model structure","title":"key-themes","text":"need get list model state objects, updating functions. need describe process executes time step. helps us uncover hidden constraints model. also step closer able construct multiple representations model (e.g. machines resource sharers).","code":""},{"path":"/articles/key-themes.html","id":"extensions","dir":"Articles","previous_headings":"","what":"Extensions","title":"key-themes","text":"needs clear link package another package want extend methods . need think kind simulation engine making people extend . One thing can make basic state objects (see topic) define queue updates access , simulation loop updates , users can write processes. Like individual enforced constraints.","code":""},{"path":"/articles/key-themes.html","id":"software-design","dir":"Articles","previous_headings":"","what":"Software design","title":"key-themes","text":"establish data structures store persistent state model, need decide enforce kind type consistency . assumes data structures used models can built using Micro-MoB. One way use assertions prior calling UseMethod make sure required inputs provided. probably right way things. outer generic function can just check bare minimum input exists. implemented specific function can checking based internal state representation. Another way complex. enforce users interact model object interface ensures consistency. easy performance thing make everything Matrix object matrix mult faster.","code":"BloodFeeding = function(t, Mod){   UseMethod(\"BloodFeeding\", Mod$bloodfeedingPars) }"},{"path":"/articles/key-themes.html","id":"model-object","dir":"Articles","previous_headings":"","what":"Model object","title":"key-themes","text":"store model object environment. gist shows . Luckily conversion -easy list2env .list.","code":""},{"path":"/articles/key-themes.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"key-themes","text":"One thing nice model, matter complex, ’d like compute quantities “standard parameters”, feeding rate, human blood index, etc. fundamental RM parameters computable model parameters without simulation.","code":""},{"path":[]},{"path":"/articles/key-themes.html","id":"simulation-loop","dir":"Articles","previous_headings":"Simulation update","what":"Simulation loop","title":"key-themes","text":":","code":"MicroSimulation = function(Model){with(Model$runtime,{   # Defined in Micro-MoB   for(t in T0:Tmax){     if (t %% 100 == 0) print(paste(\"t =\", t))      Model = dMicroSim(t, Model)     Model = IO(t, Model)     Model = Update(t, Model)   }    return(Model) })}"},{"path":"/articles/key-themes.html","id":"update","dir":"Articles","previous_headings":"Simulation update","what":"Update","title":"key-themes","text":"’s couple ways discrete time simulation, regardless seen discretization underlying continuous time process model developed “scratch” discrete time model (amounts asking rate probability fundamental quantity specified modeler). Anyway discrete time, basically can either : Synchronous update - like cellular automata work (usually), units may undergo state change draw state changes simultaneously based (yet unchanged) state. updates applied instantaneously. individual , even though doesn’t initially appear case, updated merely queued processes, aren’t applied time step ends. Asynchronous update - Micro-MoB . State updated processes executed time step. requires caution, although can result processes functions shorter specialized. Basically, state used compute probabilities proportions modified longer used compute dynamic values. former means need spend time working model’s engine … software architecture. ’s individual large amount code dedicated queuing executing state updates. spend upfront cost, get leeway model processes. latter easier get running right away bit freewheeling. need careful execution order processes. upshot may easier compartmentalize functions work smaller parts state. terms synchronous asynchronous wrong, mean quite different things used rigorously. ’re just talking queuing updates execute versus executing updates sequentially way mimics queuing updates. update loop fundamental. Let’s see says: ’s order things happen: Intervene - instantaneously changes model state anything happens. sense happens “” ticks clock, updates see newly intervened-upon state execute updates day. Update - currently unused. guess updates aquatic populations? ok, long adults modified MosquitoDynamics. HumanBehavior - Okay, need specify parts state “bounds” updating prior certain point loop. mean ’s easier shoot foot way, example someone (reason …) made Update function killed adult mosquitoes, break contract process updating processes, downstream processes need unmodified adult mosquito state calculate probabilities. , ’d updating adult mosquitoes , isn’t okay. Another way see thinking SIR model birth death. discrete time might look like . \\[\\begin{equation} \\begin{array}{rl} S(t+1) &= S(t) + b N(t) - \\beta S(t) (t) - \\mu S(t) \\\\ (t+1) &= (t) + \\beta S(t) (t) - \\gamma (t) - \\mu (t) \\\\ R(t+1) &= R(t) + \\gamma (t) - \\mu R(t) \\end{array} \\end{equation}\\] Now let’s say things wrong. Let’s execute demographics function update state infection. \\[\\begin{equation} \\begin{array}{rl} S^{\\prime}(t) &= S(t) + b N(t) - \\mu S(t) \\\\ ^{\\prime}(t) &= (t) - \\mu (t) \\\\ R^{\\prime}(t) &= R(t) - \\mu R(t) \\end{array} \\end{equation}\\] Ok, now let’s apply infection function. \\[\\begin{equation} \\begin{array}{rl} S^{\\prime}(t+1) &= S^{\\prime}(t) - \\beta S^{\\prime}(t)^{\\prime}(t) \\\\ ^{\\prime}(t+1) &= ^{\\prime}(t) + \\beta S^{\\prime}(t)^{\\prime}(t) - \\gamma ^{\\prime}(t) \\\\ R^{\\prime}(t+1) &= R^{\\prime}(t)  + \\gamma ^{\\prime}(t) \\end{array} \\end{equation}\\] aren’t equivalent.","code":"dMicroSim = function(t, Mod){   # Defined in Micro-MoB   ##########################################   # + IRS Spraying   # + ITN Mass Distribution   # ... and other modes of vector control   # + Mass Treatment   # + Reactive Case Detection   # ... and other health-based interventions   ##########################################   Mod = Intervene(t, Mod)      ##########################################   #  Called by:    #    + some models of aquatic mosquito   #      populations with dynamic resources    #      & resource-based competition.    #########################################   #Mod = Update(t, Mod)      ###########################   # Micro-Human.Rmd    # + TimeSpent   # + MyITN, UseITN   ###########################   Mod = HumanBehavior(t, Mod)    ###########################   # VectorControl.Rmd    # + ITNs, IRS, LSM   ###########################   Mod = VectorControlEffects(t, Mod)    #######################   # Micro-BloodFeeding.Rmd   # + FeedingSuccess modifies MPars$psi   # + kappa, eir, Q   #######################   Mod = BloodFeeding(t, Mod)      ##############################   # Micro-Mosquito.Rmd   # Micro-Mosquito-Adult.Rmd   # Micro-Mosquito-Aquatic.Rmd   # + dMdt   # + dLdt   ##############################   Mod = MosquitoDynamics(t, Mod)     ###############################   # HumanMicro.Rmd   # + P.falciparum   ###############################   Mod = InfectionDynamics(t, Mod)      return(Mod)  } b <- 0.01 beta <- 0.0025 mu <- 1/70 gamma <- 1/7 SIR <- c(500, 50, 10)  synchronous_sir <- function(sir) {   s <- sir[1]; i <- sir[2]; r <- sir[3]   n <- s + i + r   c(     s + (b*n) - (beta*s*i) - (mu*s),     i + (beta*s*i) - (gamma*i) - (mu*i),     r + (gamma*i) - (mu*r)   ) }  asynchronous_sir_demographics <- function(sir) {   s <- sir[1]; i <- sir[2]; r <- sir[3]   n <- s + i + r   c(     s + (b*n) - (mu*s),     i - (mu*i),     r - (mu*r)   ) }  asynchronous_sir_infection <- function(sir) {   s <- sir[1]; i <- sir[2]; r <- sir[3]   n <- s + i + r   c(     s - (beta*s*i),     i + (beta*s*i) - (gamma*i),     r + (gamma*i)   ) }  sync_sir <- synchronous_sir(SIR)  sync_sir_d <- asynchronous_sir_demographics(SIR) sync_sir_i <- asynchronous_sir_infection(sync_sir_d)  dt <- data.frame(rbind(sync_sir, sync_sir_i),row.names = c(\"Synchronous\", \"Asynchronous\")) colnames(dt) <- c(\"S\", \"I\", \"R\") dt #>                     S        I        R #> Synchronous  435.9571 104.6429 17.00000 #> Asynchronous 437.0401 103.6619 16.89796"},{"path":"/articles/key-themes.html","id":"data-structures-processes","dir":"Articles","previous_headings":"","what":"Data structures & processes","title":"key-themes","text":"Data structures model stores state. parts state minimum state (state required specify model sample/compute next update). Let’s call anything thats part minimum model state persistent state anything else transient state (e.g., predictable functions history process). best way go looking update functions executed time step see input output (, compute update). want (think). update/component functions want dispatch object class contains everything function update (“output”) also contains relevant parameters (Update might exception). want make clear model objects uses compute (“input”).","code":""},{"path":"/articles/key-themes.html","id":"intervene","dir":"Articles","previous_headings":"Data structures & processes","what":"Intervene","title":"key-themes","text":"described Micro-Intervene.Rmd. looks like currently implemented.","code":"Intervene = function(t, Mod){   # Defined in Micro-Intervene.Rmd   if(length(Mod$intervene)>0){     for(i in 1:length(Mod$intervene)){       Mod = intervene(i,t,Mod)     }   }   return(Mod) }"},{"path":"/articles/key-themes.html","id":"input","dir":"Articles","previous_headings":"Data structures & processes > Intervene","what":"Input","title":"key-themes","text":"Mod$intervene: list interventions suppose. guess intervene dispatches based class intervention list.","code":""},{"path":"/articles/key-themes.html","id":"output","dir":"Articles","previous_headings":"Data structures & processes > Intervene","what":"Output","title":"key-themes","text":"None yet.","code":""},{"path":"/articles/key-themes.html","id":"update-1","dir":"Articles","previous_headings":"Data structures & processes","what":"Update","title":"key-themes","text":"described Micro-ModelObject.Rmd. looks like currently implemented. update generic function list can change parameters features model. update$F function form F(t, Mod, pars) update$pars holds parameters passed function F update object arbitrarily long list updates.","code":"Update = function(t, Mod){   # Defined in Micro-ModelObject.Rmd   if(length(Mod$update)>0){     for(i in 1:length(Mod$update)){       Mod = update(i,t,Mod)      }    }   return(Mod) }"},{"path":"/articles/key-themes.html","id":"input-1","dir":"Articles","previous_headings":"Data structures & processes > Update","what":"Input","title":"key-themes","text":"Mod$update: list updates suppose. guess update dispatches based class intervention list.","code":""},{"path":"/articles/key-themes.html","id":"output-1","dir":"Articles","previous_headings":"Data structures & processes > Update","what":"Output","title":"key-themes","text":"None yet.","code":""},{"path":"/articles/key-themes.html","id":"humanbehavior","dir":"Articles","previous_headings":"Data structures & processes","what":"HumanBehavior","title":"key-themes","text":"described Micro-Human.Rmd. break things terms component function.","code":"HumanBehavior = function(t, mod){   mod = SpendTime(t, mod)   mod = Travel(t, mod)    mod = Fever(t, mod)   mod = CareSeeking(t, mod)   mod = OwnITN(t, mod)   mod = UseITN(t, mod)   return(mod) }"},{"path":"/articles/key-themes.html","id":"spendtime","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior","what":"SpendTime","title":"key-themes","text":"Dispatches class:","code":"SpendTime = function(t, mod){   UseMethod(\"SpendTime\", mod$host$spendtimePars) }"},{"path":"/articles/key-themes.html","id":"input-2","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior > SpendTime","what":"Input","title":"key-themes","text":"Things class?","code":""},{"path":"/articles/key-themes.html","id":"output-2","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior > SpendTime","what":"Output","title":"key-themes","text":"Mod$TimeSpent: modifies time spent matrix","code":""},{"path":"/articles/key-themes.html","id":"travel","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior","what":"Travel","title":"key-themes","text":"Dispatches class:","code":"Travel = function(t, mod){   UseMethod(\"Travel\", mod$host$travelPars) }"},{"path":"/articles/key-themes.html","id":"input-3","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior > Travel","what":"Input","title":"key-themes","text":"Things class?","code":""},{"path":"/articles/key-themes.html","id":"output-3","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior > Travel","what":"Output","title":"key-themes","text":"Mod$TravelAR: modifies object","code":""},{"path":"/articles/key-themes.html","id":"fever","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior","what":"Fever","title":"key-themes","text":"Dispatches class:","code":"Fever = function(t, mod){   UseMethod(\"Fever\", mod$host$feverPars) }"},{"path":"/articles/key-themes.html","id":"input-4","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior > Fever","what":"Input","title":"key-themes","text":"Things class?","code":""},{"path":"/articles/key-themes.html","id":"output-4","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior > Fever","what":"Output","title":"key-themes","text":"Things mod$host$feverPars?","code":""},{"path":"/articles/key-themes.html","id":"careseeking","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior","what":"CareSeeking","title":"key-themes","text":"Dispatches class:","code":"CareSeeking = function(t, mod){   UseMethod(\"CareSeeking\", mod$host$careseekingPars) }"},{"path":"/articles/key-themes.html","id":"input-5","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior > CareSeeking","what":"Input","title":"key-themes","text":"Things class?","code":""},{"path":"/articles/key-themes.html","id":"output-5","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior > CareSeeking","what":"Output","title":"key-themes","text":"Things Mod$host$careseekingPars?","code":""},{"path":"/articles/key-themes.html","id":"ownitn","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior","what":"OwnITN","title":"key-themes","text":"Micro-VectorControl-ITN.Rmd","code":"OwnITN = function(t, mod){   UseMethod(\"OwnITN\", mod$vectorcontrol$itnPars) }"},{"path":[]},{"path":[]},{"path":"/articles/key-themes.html","id":"useitn","dir":"Articles","previous_headings":"Data structures & processes > HumanBehavior","what":"UseITN","title":"key-themes","text":"Micro-VectorControl-ITN.Rmd","code":"UseITN = function(t, mod){   UseMethod(\"UseITN\", mod$vectorcontrol$itnPars) }"},{"path":[]},{"path":[]},{"path":"/articles/key-themes.html","id":"vectorcontroleffects","dir":"Articles","previous_headings":"Data structures & processes","what":"VectorControlEffects","title":"key-themes","text":"described Micro-VectorControl.Rmd. , break things look component function.","code":"VectorControlEffects = function(t, Mod){   Mod = resetBaseline(Mod)    Mod = ITNEffects(t, Mod)   Mod = IRSEffects(t, Mod)   Mod = LSMEffects(t, Mod)   #Mod = ATSB(t, Mod)   return(Mod) }"},{"path":"/articles/key-themes.html","id":"resetbaseline","dir":"Articles","previous_headings":"Data structures & processes > VectorControlEffects","what":"resetBaseline","title":"key-themes","text":"just resets mosquito parameters baseline prior computing effect today’s vector control. Found Micro-VectorControl.Rmd","code":"resetBaseline = function(Mod){   # Defined in Micro-VectorControl.Rmd   for(i in 1:Mod$nMosquito){     Mod$mosquito[[i]]$adultPars = Mod$mosquito[[i]]$adultBase     Mod$mosquito[[i]]$aquaPars = Mod$mosquito[[i]]$aquaBase   }   return(Mod) }"},{"path":"/articles/key-themes.html","id":"itneffects","dir":"Articles","previous_headings":"Data structures & processes > VectorControlEffects","what":"ITNEffects","title":"key-themes","text":"Micro-VectorControl-ITM.Rmd. Note multiple dispatch.","code":"ITNEffects = function(t, mod){   UseMethod(\"ITNEffects\", mod$vectorcontrol$itnPars) }"},{"path":"/articles/key-themes.html","id":"irseffects","dir":"Articles","previous_headings":"Data structures & processes > VectorControlEffects","what":"IRSEffects","title":"key-themes","text":"Micro-VectorControl-IRS.Rmd. ’s dispatch function yet, . seems one class method, class step:","code":"IRSEffects.step = function(t, Mod, i=1){    #############################################   # efficacy is modeled as a step function    # daily survival at the haunts is reduced by 1-IRScoverage   # for a number of days specified by 'duration'     #############################################   fac = rep(1, Mod$landscape$nHaunts)   ix = which(t-Mod$landscape$haunts$daySprayed) < Mod$vectorcontrol$irsPars$duration    fac[ix] = 1-Mod$landscape$haunts$IRScoverage[ix]   Mod = adjust(fac, Mod) }"},{"path":"/articles/key-themes.html","id":"lsmeffects","dir":"Articles","previous_headings":"Data structures & processes > VectorControlEffects","what":"LSMEffects","title":"key-themes","text":"LSM means Larval Source Management. Micro-VectorControl.Rmd.","code":"LSMEffects = function(t, Mod){    UseMethod(\"LSMEffects\", Mod$vectorcontrol$lsmPars) }"},{"path":"/articles/key-themes.html","id":"atsb","dir":"Articles","previous_headings":"Data structures & processes > VectorControlEffects","what":"ATSB","title":"key-themes","text":"implemented yet.","code":""},{"path":"/articles/key-themes.html","id":"bloodfeeding","dir":"Articles","previous_headings":"Data structures & processes","what":"BloodFeeding","title":"key-themes","text":"supremely important function. function executes, free update state adult mosquitoes human infections. ’s stored Micro-BloodFeeding.Rmd. basic dispatch :","code":"BloodFeeding = function(t, Mod){   UseMethod(\"BloodFeeding\", Mod$bloodfeedingPars) }"},{"path":"/articles/math.html","id":"net-infectiousness-of-humans-kappa","dir":"Articles","previous_headings":"","what":"Net infectiousness of humans \\(\\kappa\\)","title":"math","text":"standard Ross-Macdonald model, force infection mosquitoes \\(acX\\) \\(X = /H\\) prevalence disease humans, \\(= fq\\) human feeding rate, \\(c\\) transmission efficiency. , know \\(\\kappa\\) part referring net infectiousness human host population, proportion bites humans infect mosquito. Micro-MoB RM-Spatial ’s calculated like : \\[ \\kappa_{p\\times 1} = \\upsilon_{p\\times 1} (\\beta_{p\\times n}^{\\intercal} x_{n\\times1}) + (1 - \\upsilon_{p\\times 1})x_{\\delta_{p\\times 1}} \\] , \\(\\upsilon_{p\\times 1}\\) resident fraction patch, \\(x_{\\delta_{p\\times 1}}\\) net infectiousness visitors, \\(\\beta_{n\\times p}\\) biting distribution matrix. order try sync models, lets examine \\(\\beta\\) made: \\[ \\beta_{n\\times p} = \\mbox{diag}(w_{f})_{n\\times n} \\cdot \\Psi_{n\\times p} \\cdot \\mbox{diag}(1/W)_{p\\times p} \\] \\(W_{p\\times 1} = \\Psi^{\\intercal}_{p\\times n} \\cdot w_{f}H_{n\\times 1}\\) available human population, \\(\\Psi = \\Theta \\xi\\) time risk matrix, \\(w_{f}\\) biting weights. line simple \\(\\kappa\\) RM model, let’s assume 1 patch, 1 strata, biting weight \\(1\\). assume visitors, \\(\\upsilon = 1\\). looks like new \\(\\kappa\\) , fact precisely factor \\(1/H\\), suspected: \\(\\beta\\) simplifies \\(1/H\\). new computation \\(\\kappa\\) extra term \\(1/H\\) extraneous: \\[ \\beta = 1 \\cdot (1) \\cdot (1/H) \\\\ \\kappa = (1/H) cx = (1/H)c(/H) \\] Fix : \\[ \\beta^{\\intercal} (xH) \\]","code":"H <- 100 I <- 20 c <- 0.15 X <- I/H  kappa <- c * X kappa #> [1] 0.03 Theta <- matrix(1, nrow = 1, ncol = 1) Psi <- Theta * 1 w_f <- 1 W <- t(Psi) %*% (w_f * H)  beta <- diag(w_f) %*% Psi %*% diag(1/W)  x <- c * X  kappa_new <- t(beta) %*% (x) kappa_new #>       [,1] #> [1,] 3e-04 kappa_new * H #>      [,1] #> [1,] 0.03"},{"path":"/articles/math.html","id":"human-availability","dir":"Articles","previous_headings":"","what":"Human availability","title":"math","text":"returns something akin expectation number persons available bitten place \\(\\) time \\(t\\). ’s expectation weight population \\(w_f\\) (still units people) multiply matrix probabilities. \\[\\begin{equation} W(t) = \\Psi(t)^T \\cdot w_f H \\end{equation}\\] contend intuitive write way: \\[\\begin{equation} W(t) = (\\Theta(t)^T \\cdot w_f H) \\xi(t) \\end{equation}\\] gives answer either way. second way clearly see going \\((\\Theta(t)^T \\cdot w_f H)\\) expected number people patch, multiply probability mosquito take bite time. ’s little confusing ’s hidden \\(\\Psi\\). example 2 patches 3 strata (vector \\(H\\) length 6).","code":"H <- c(s1p1 = 50, s1p2 = 20, s2p1 = 10, s2p2 = 30, s3p1 = 20, s3p2 = 10) wt <- rep(1, length(H)) wt <- setNames(wt, names(H))  theta_day <- matrix(   c(0.4, 0.6,     0.5, 0.5,     0.2, 0.8,     0.5, 0.5,     0.6, 0.4,     0.2, 0.8), nrow = length(H), ncol = 2, byrow = TRUE )  # same thing t(theta_day) %*% (wt * H) #>      [,1] #> [1,]   61 #> [2,]   79 c(sum(H * theta_day[, 1]), sum(H * theta_day[, 2])) #> [1] 61 79  theta_night <- matrix(   c(0.9, 0.1,     0.6, 0.4,     0.5, 0.5,     0.6, 0.4,     0.8, 0.2,     0.4, 0.6), nrow = length(H), ncol = 2, byrow = TRUE )  # xi_day <- 0.3 # xi_night <- 0.7  xi_day <- 0.15 xi_night <- 0.85  ((t(theta_day) %*% (wt * H)) * (xi_day)) + ((t(theta_night) %*% (wt * H)) * (xi_night)) #>       [,1] #> [1,] 94.15 #> [2,] 45.85  # (((t(theta_day) * xi_day) %*% (wt * H))) + (((t(theta_night) * xi_night) %*% (wt * H)))"},{"path":"/articles/math.html","id":"time-spent-and-time-at-risk","dir":"Articles","previous_headings":"","what":"Time spent and time at risk","title":"math","text":"Let’s think terms person-time.","code":"n <- 3 # strata p <- 4 # places  wf <- c(0.5, 1, 2) H <- c(200, 120, 75)  Theta <- matrix(rexp(n*p), nrow = n, ncol = p) Theta <- Theta / rowSums(Theta)  W <- t(Theta) %*% (wf * H)    d <- 4  Theta_d <- lapply(X = 1:d, FUN = function(x) {   Theta <- matrix(rexp(n*p), nrow = n, ncol = p)   Theta <- Theta / rowSums(Theta)   return(Theta) }) xi <- rexp(d) xi <- xi / sum(xi)  W_d <- lapply(X = 1:d, FUN = function(t) {   t(Theta_d[[t]] * xi[t]) %*% (wf * H) })  Reduce(\"+\", W_d) #>           [,1] #> [1,]  59.52878 #> [2,] 108.52437 #> [3,]  92.82613 #> [4,] 109.12072"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean L. Wu. Author, maintainer. David L. Smith. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wu S, Smith D (2021). MicroMoB: Discrete time simulation mosquito-borne pathogen transmission. https://github.com/dd-harp/MicroMoB https://dd-harp.github.io/MicroMoB/index.html.","code":"@Manual{,   title = {MicroMoB: Discrete time simulation of mosquito-borne pathogen transmission},   author = {Sean L. Wu and David L. Smith},   year = {2021},   note = {https://github.com/dd-harp/MicroMoB https://dd-harp.github.io/MicroMoB/index.html}, }"},{"path":[]},{"path":"/index.html","id":"software-design","dir":"","previous_headings":"","what":"Software design","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"model object environment class attribute. interior structure named lists. function passed entire model object, dispatch classes objects within model object.","code":""},{"path":"/index.html","id":"components","dir":"","previous_headings":"","what":"Components","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"model broken components, humans, immature adult mosquitoes (others). component interface, methods must defined component. component’s interface stored file, example, R/humans_interface.R shows user methods must defined human model. components (e.g. bloodmeal) call generic methods knowing specific code implementing , must return values consistent definition. call specific implementation component model. Specific implementations found files replace _interface model name, example R/humans_SIR.R. accompanying test files located tests/testthat. creating new model, please remember test adequately. list components require interfaces specific models implement .","code":""},{"path":"/index.html","id":"mosquitoes","dir":"","previous_headings":"Components","what":"Mosquitoes","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"mosquito component responsible dynamics update adult mosquito populations. interface defined R/mosquito_interface.R.","code":""},{"path":"/index.html","id":"aquatic","dir":"","previous_headings":"Components","what":"Aquatic","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"aquatic component responsible dynamics update immature (aquatic stage) mosquito populations. interface defined R/aquatic_interface.R.","code":""},{"path":"/index.html","id":"humans","dir":"","previous_headings":"Components","what":"Humans","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"human component updates human populations. interface defined R/humans_interface.R.","code":""},{"path":"/index.html","id":"visitor","dir":"","previous_headings":"Components","what":"Visitor","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"human component updates human populations outside resident population geographic area simulated. interface defined R/visitor_interface.R.","code":""},{"path":"/index.html","id":"alternative-blood-hosts","dir":"","previous_headings":"Components","what":"Alternative blood hosts","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"alternative blood host component responsible blood hosts mosquitoes (livestock, dogs, etc). interface defined R/althost_interface.R.","code":""},{"path":"/index.html","id":"update","dir":"","previous_headings":"","what":"Update","title":"Discrete time simulation of mosquito-borne pathogen transmission","text":"update model, function called gathers information various components calculate rates couple components (.e. infection) together, passed back individual component, updated using generic interface component.","code":""},{"path":"/reference/MicroMoB.html","id":null,"dir":"Reference","previous_headings":"","what":"MicroMoB: Microsimulation for mosquito-borne pathogens — MicroMoB","title":"MicroMoB: Microsimulation for mosquito-borne pathogens — MicroMoB","text":"Discrete time simulation mosquito-borne pathogen transmission","code":""},{"path":[]},{"path":"/reference/MicroMoB.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MicroMoB: Microsimulation for mosquito-borne pathogens — MicroMoB","text":"Maintainer: Sean L. Wu slwood89@gmail.com (ORCID) Authors: David L. Smith smitdave@uw.edu (ORCID)","code":""},{"path":"/reference/add_oviposit.html","id":null,"dir":"Reference","previous_headings":"","what":"Add eggs from oviposition to aquatic model — add_oviposit","title":"Add eggs from oviposition to aquatic model — add_oviposit","text":"method dispatches type model$aqua","code":""},{"path":"/reference/add_oviposit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add eggs from oviposition to aquatic model — add_oviposit","text":"","code":"add_oviposit(model, eggs)"},{"path":"/reference/add_oviposit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add eggs from oviposition to aquatic model — add_oviposit","text":"model object make_MicroMoB eggs vector length p giving eggs place","code":""},{"path":"/reference/add_oviposit.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Add eggs from oviposition to forced aquatic model — add_oviposit.trace","title":"Add eggs from oviposition to forced aquatic model — add_oviposit.trace","text":"function nothing trace models affected endogenous dynamics.","code":""},{"path":"/reference/add_oviposit.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add eggs from oviposition to forced aquatic model — add_oviposit.trace","text":"","code":"# S3 method for trace add_oviposit(model, eggs)"},{"path":"/reference/add_oviposit.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add eggs from oviposition to forced aquatic model — add_oviposit.trace","text":"model object make_MicroMoB eggs vector length p giving eggs place","code":""},{"path":"/reference/compute_H.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human population strata sizes for SIS model (\\(H\\)) — compute_H.SIS","title":"Compute human population strata sizes for SIS model (\\(H\\)) — compute_H.SIS","text":"Compute human population strata sizes SIS model (\\(H\\))","code":""},{"path":"/reference/compute_H.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human population strata sizes for SIS model (\\(H\\)) — compute_H.SIS","text":"","code":"# S3 method for SIS compute_H(model)"},{"path":"/reference/compute_H.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human population strata sizes for SIS model (\\(H\\)) — compute_H.SIS","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_H.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human population strata sizes (\\(H\\)) — compute_H","title":"Compute human population strata sizes (\\(H\\)) — compute_H","text":"method dispatches type model$human.","code":""},{"path":"/reference/compute_H.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human population strata sizes (\\(H\\)) — compute_H","text":"","code":"compute_H(model)"},{"path":"/reference/compute_H.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human population strata sizes (\\(H\\)) — compute_H","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_H.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute human population strata sizes (\\(H\\)) — compute_H","text":"vector length n","code":""},{"path":"/reference/compute_O.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available alternative blood hosts (\\(O\\)) — compute_O","title":"Compute available alternative blood hosts (\\(O\\)) — compute_O","text":"method dispatches type model$alternative.","code":""},{"path":"/reference/compute_O.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available alternative blood hosts (\\(O\\)) — compute_O","text":"","code":"compute_O(model)"},{"path":"/reference/compute_O.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available alternative blood hosts (\\(O\\)) — compute_O","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_O.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute available alternative blood hosts (\\(O\\)) — compute_O","text":"vector length p","code":""},{"path":"/reference/compute_O.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available alternative blood hosts for trace model (\\(O\\)) — compute_O.trace","title":"Compute available alternative blood hosts for trace model (\\(O\\)) — compute_O.trace","text":"Compute available alternative blood hosts trace model (\\(O\\))","code":""},{"path":"/reference/compute_O.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available alternative blood hosts for trace model (\\(O\\)) — compute_O.trace","text":"","code":"# S3 method for trace compute_O(model)"},{"path":"/reference/compute_O.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available alternative blood hosts for trace model (\\(O\\)) — compute_O.trace","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_Psi.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time at risk matrix for SIS model (\\(\\Psi\\)) — compute_Psi.SIS","title":"Compute time at risk matrix for SIS model (\\(\\Psi\\)) — compute_Psi.SIS","text":"Compute time risk matrix SIS model (\\(\\Psi\\))","code":""},{"path":"/reference/compute_Psi.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time at risk matrix for SIS model (\\(\\Psi\\)) — compute_Psi.SIS","text":"","code":"# S3 method for SIS compute_Psi(model)"},{"path":"/reference/compute_Psi.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time at risk matrix for SIS model (\\(\\Psi\\)) — compute_Psi.SIS","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_Psi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","text":"time risk matrix \\(\\Psi = \\Theta \\xi\\) method dispatches type model$human.","code":""},{"path":"/reference/compute_Psi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","text":"","code":"compute_Psi(model)"},{"path":"/reference/compute_Psi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_Psi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_Psi","text":"matrix n rows p columns","code":""},{"path":"/reference/compute_W.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available humans for SIS model (\\(W\\)) — compute_W.SIS","title":"Compute available humans for SIS model (\\(W\\)) — compute_W.SIS","text":"Compute available humans SIS model (\\(W\\))","code":""},{"path":"/reference/compute_W.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available humans for SIS model (\\(W\\)) — compute_W.SIS","text":"","code":"# S3 method for SIS compute_W(model)"},{"path":"/reference/compute_W.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available humans for SIS model (\\(W\\)) — compute_W.SIS","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_W.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available humans (\\(W\\)) — compute_W","title":"Compute available humans (\\(W\\)) — compute_W","text":"normally computed $$W = \\Psi^{\\intercal} \\cdot w_{f} H$$. method dispatches type model$human.","code":""},{"path":"/reference/compute_W.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available humans (\\(W\\)) — compute_W","text":"","code":"compute_W(model)"},{"path":"/reference/compute_W.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available humans (\\(W\\)) — compute_W","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_W.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute available humans (\\(W\\)) — compute_W","text":"vector length p","code":""},{"path":"/reference/compute_Wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","title":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","text":"method dispatches type model$visitor.","code":""},{"path":"/reference/compute_Wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","text":"","code":"compute_Wd(model)"},{"path":"/reference/compute_Wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_Wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute available visitors (\\(W_{\\delta}\\)) — compute_Wd","text":"vector length p","code":""},{"path":"/reference/compute_Wd.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available visitors for trace model (\\(W_{\\delta}\\)) — compute_Wd.trace","title":"Compute available visitors for trace model (\\(W_{\\delta}\\)) — compute_Wd.trace","text":"Compute available visitors trace model (\\(W_{\\delta}\\))","code":""},{"path":"/reference/compute_Wd.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available visitors for trace model (\\(W_{\\delta}\\)) — compute_Wd.trace","text":"","code":"# S3 method for trace compute_Wd(model)"},{"path":"/reference/compute_Wd.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available visitors for trace model (\\(W_{\\delta}\\)) — compute_Wd.trace","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_Z.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute density of infective mosquitoes for RM model (\\(Z\\)) — compute_Z.RM","title":"Compute density of infective mosquitoes for RM model (\\(Z\\)) — compute_Z.RM","text":"method returns Z.","code":""},{"path":"/reference/compute_Z.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute density of infective mosquitoes for RM model (\\(Z\\)) — compute_Z.RM","text":"","code":"# S3 method for RM compute_Z(model)"},{"path":"/reference/compute_Z.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute density of infective mosquitoes for RM model (\\(Z\\)) — compute_Z.RM","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_Z.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","title":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","text":"method dispatches type model$mosquito","code":""},{"path":"/reference/compute_Z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","text":"","code":"compute_Z(model)"},{"path":"/reference/compute_Z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_Z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute density of infective mosquitoes (\\(Z\\)) — compute_Z","text":"vector length p","code":""},{"path":"/reference/compute_bloodmeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"run prior step functions update components time step. computes various quantities related disease transmission species using generic interfaces (methods) provided component. updates EIR vector human component, kappa, net infectiousness hosts mosquito component.","code":""},{"path":"/reference/compute_bloodmeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"","code":"compute_bloodmeal(model)"},{"path":"/reference/compute_bloodmeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_emergents.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","title":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","text":"method dispatches type model$aqua","code":""},{"path":"/reference/compute_emergents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","text":"","code":"compute_emergents(model)"},{"path":"/reference/compute_emergents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults (\\(\\lambda\\)) — compute_emergents","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_emergents.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","title":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","text":"function dispatches second argument model$aqua stochastic deterministic behavior.","code":""},{"path":"/reference/compute_emergents.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","text":"","code":"# S3 method for trace compute_emergents(model)"},{"path":"/reference/compute_emergents.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_emergents.trace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute number of newly emerging adults from forcing term — compute_emergents.trace","text":"see compute_emergents.trace_deterministic compute_emergents.trace_stochastic","code":""},{"path":"/reference/compute_emergents.trace_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults from forcing term (deterministic) — compute_emergents.trace_deterministic","title":"Compute number of newly emerging adults from forcing term (deterministic) — compute_emergents.trace_deterministic","text":"Return column lambda matrix day.","code":""},{"path":"/reference/compute_emergents.trace_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults from forcing term (deterministic) — compute_emergents.trace_deterministic","text":"","code":"# S3 method for trace_deterministic compute_emergents(model)"},{"path":"/reference/compute_emergents.trace_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults from forcing term (deterministic) — compute_emergents.trace_deterministic","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_emergents.trace_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of newly emerging adults from forcing term (stochastic) — compute_emergents.trace_stochastic","title":"Compute number of newly emerging adults from forcing term (stochastic) — compute_emergents.trace_stochastic","text":"Draw Poisson distributed number emerging adults mean parameter column trace matrix day.","code":""},{"path":"/reference/compute_emergents.trace_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of newly emerging adults from forcing term (stochastic) — compute_emergents.trace_stochastic","text":"","code":"# S3 method for trace_stochastic compute_emergents(model)"},{"path":"/reference/compute_emergents.trace_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of newly emerging adults from forcing term (stochastic) — compute_emergents.trace_stochastic","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_f.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mosquito feeding rate for RM model (\\(f\\)) — compute_f.RM","title":"Compute mosquito feeding rate for RM model (\\(f\\)) — compute_f.RM","text":"method simply returns f parameter mosquito object, RM model assumes constant blood feeding rate.","code":""},{"path":"/reference/compute_f.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mosquito feeding rate for RM model (\\(f\\)) — compute_f.RM","text":"","code":"# S3 method for RM compute_f(model, B)"},{"path":"/reference/compute_f.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mosquito feeding rate for RM model (\\(f\\)) — compute_f.RM","text":"model object make_MicroMoB B vector length p giving total blood host availability patch","code":""},{"path":"/reference/compute_f.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mosquito feeding rate (\\(f\\)) — compute_f","title":"Compute mosquito feeding rate (\\(f\\)) — compute_f","text":"method dispatches type model$mosquito","code":""},{"path":"/reference/compute_f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mosquito feeding rate (\\(f\\)) — compute_f","text":"","code":"compute_f(model, B)"},{"path":"/reference/compute_f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mosquito feeding rate (\\(f\\)) — compute_f","text":"model object make_MicroMoB B vector length p giving total blood host availability patch","code":""},{"path":"/reference/compute_f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mosquito feeding rate (\\(f\\)) — compute_f","text":"vector length p","code":""},{"path":"/reference/compute_oviposit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","text":"method dispatches type model$aqua","code":""},{"path":"/reference/compute_oviposit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","text":"","code":"compute_oviposit(model)"},{"path":"/reference/compute_oviposit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_oviposit.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of eggs laid from oviposition for each patch — compute_oviposit.trace","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit.trace","text":"used modeling emergence trace.","code":""},{"path":"/reference/compute_oviposit.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit.trace","text":"","code":"# S3 method for trace compute_oviposit(model)"},{"path":"/reference/compute_oviposit.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of eggs laid from oviposition for each patch — compute_oviposit.trace","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_q.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"method simply returns q parameter mosquito object, RM model assumes constant fraction blood meals taken human hosts.","code":""},{"path":"/reference/compute_q.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"","code":"# S3 method for RM compute_q(model, W, Wd, B)"},{"path":"/reference/compute_q.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"model object make_MicroMoB W vector length p giving human availability patch (\\(W\\)) Wd vector length p giving visitor availability patch (\\(W_{\\delta}\\)) B vector length p giving total blood host availability patch (\\(B\\))","code":""},{"path":"/reference/compute_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human blood feeding fraction (\\(q\\)) — compute_q","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"method dispatches type model$mosquito","code":""},{"path":"/reference/compute_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"","code":"compute_q(model, W, Wd, B)"},{"path":"/reference/compute_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"model object make_MicroMoB W vector length p giving human availability patch (\\(W\\)) Wd vector length p giving visitor availability patch (\\(W_{\\delta}\\)) B vector length p giving total blood host availability patch (\\(B\\))","code":""},{"path":"/reference/compute_q.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"vector length p","code":""},{"path":"/reference/compute_wf.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human biting weights for SIS model (\\(w_{f}\\)) — compute_wf.SIS","title":"Compute human biting weights for SIS model (\\(w_{f}\\)) — compute_wf.SIS","text":"Compute human biting weights SIS model (\\(w_{f}\\))","code":""},{"path":"/reference/compute_wf.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human biting weights for SIS model (\\(w_{f}\\)) — compute_wf.SIS","text":"","code":"# S3 method for SIS compute_wf(model)"},{"path":"/reference/compute_wf.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human biting weights for SIS model (\\(w_{f}\\)) — compute_wf.SIS","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_wf.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","title":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","text":"method dispatches type model$human.","code":""},{"path":"/reference/compute_wf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","text":"","code":"compute_wf(model)"},{"path":"/reference/compute_wf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_wf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute human biting weights (\\(w_{f}\\)) — compute_wf","text":"vector length n","code":""},{"path":"/reference/compute_x.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness for SIS model (\\(x\\)) — compute_x.SIS","title":"Compute net infectiousness for SIS model (\\(x\\)) — compute_x.SIS","text":"Compute net infectiousness SIS model (\\(x\\))","code":""},{"path":"/reference/compute_x.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness for SIS model (\\(x\\)) — compute_x.SIS","text":"","code":"# S3 method for SIS compute_x(model)"},{"path":"/reference/compute_x.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness for SIS model (\\(x\\)) — compute_x.SIS","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness of humans (\\(x\\)) — compute_x","title":"Compute net infectiousness of humans (\\(x\\)) — compute_x","text":"Ross-Macdonald style transmission model, computed $$x = c X$$ method dispatches type model$human.","code":""},{"path":"/reference/compute_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness of humans (\\(x\\)) — compute_x","text":"","code":"compute_x(model)"},{"path":"/reference/compute_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness of humans (\\(x\\)) — compute_x","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute net infectiousness of humans (\\(x\\)) — compute_x","text":"vector length n","code":""},{"path":"/reference/compute_xd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","title":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","text":"method dispatches type model$visitor.","code":""},{"path":"/reference/compute_xd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","text":"","code":"compute_xd(model)"},{"path":"/reference/compute_xd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","text":"model object make_MicroMoB","code":""},{"path":"/reference/compute_xd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute net infectiousness of visitors (\\(x_{\\delta}\\)) — compute_xd","text":"vector length p","code":""},{"path":"/reference/compute_xd.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness of visitors for trace model (\\(x_{\\delta}\\)) — compute_xd.trace","title":"Compute net infectiousness of visitors for trace model (\\(x_{\\delta}\\)) — compute_xd.trace","text":"Compute net infectiousness visitors trace model (\\(x_{\\delta}\\))","code":""},{"path":"/reference/compute_xd.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness of visitors for trace model (\\(x_{\\delta}\\)) — compute_xd.trace","text":"","code":"# S3 method for trace compute_xd(model)"},{"path":"/reference/compute_xd.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness of visitors for trace model (\\(x_{\\delta}\\)) — compute_xd.trace","text":"model object make_MicroMoB","code":""},{"path":"/reference/make_MicroMoB.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a model object — make_MicroMoB","title":"Make a model object — make_MicroMoB","text":"model object hashed environment. default contains single list, model$global storing global state.","code":""},{"path":"/reference/make_MicroMoB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a model object — make_MicroMoB","text":"","code":"make_MicroMoB(tmax, p)"},{"path":"/reference/make_MicroMoB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a model object — make_MicroMoB","text":"tmax number days simulate p number places","code":""},{"path":"/reference/sample_stochastic_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a stochastic matrix — sample_stochastic_matrix","title":"Sample a stochastic matrix — sample_stochastic_matrix","text":"x matrix arbitrary number rows whose columns equal number bins stochastic matrix prob parameterizes distribution . row x gives distribution counts bins resampled according prob. conceptually similar \"stochastically\" distributing matrix x %*% prob, gives expectation.","code":""},{"path":"/reference/sample_stochastic_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a stochastic matrix — sample_stochastic_matrix","text":"","code":"sample_stochastic_matrix(x, prob)"},{"path":"/reference/sample_stochastic_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a stochastic matrix — sample_stochastic_matrix","text":"x matrix prob matrix, must number columns equal number columns x rows sum one","code":""},{"path":"/reference/sample_stochastic_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a stochastic matrix — sample_stochastic_matrix","text":"matrix whose dimensions equal original x","code":""},{"path":"/reference/sample_stochastic_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a stochastic vector — sample_stochastic_vector","title":"Sample a stochastic vector — sample_stochastic_vector","text":"Given vector counts cells, x stochastic matrix prob, row describes probability distribution cell distributed among bins, sample destination bins cell count, return vector giving number counts bins. conceptually similar \"stochastically\" distributing vector x %*% prob, gives expectation.","code":""},{"path":"/reference/sample_stochastic_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a stochastic vector — sample_stochastic_vector","text":"","code":"sample_stochastic_vector(x, prob)"},{"path":"/reference/sample_stochastic_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a stochastic vector — sample_stochastic_vector","text":"x vector prob matrix, must number rows equal x rows sum one","code":""},{"path":"/reference/sample_stochastic_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a stochastic vector — sample_stochastic_vector","text":"vector length equal number columns prob","code":""},{"path":"/reference/setup_alternative_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup trace driven alternative blood hosts — setup_alternative_trace","title":"Setup trace driven alternative blood hosts — setup_alternative_trace","text":"model complies visitors component interface. adds named list model$alternative.","code":""},{"path":"/reference/setup_alternative_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup trace driven alternative blood hosts — setup_alternative_trace","text":"","code":"setup_alternative_trace(model, O = NULL)"},{"path":"/reference/setup_alternative_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup trace driven alternative blood hosts — setup_alternative_trace","text":"model object make_MicroMoB O vector length p, matrix p rows tmax columns, NULL set 0 (visitors)","code":""},{"path":"/reference/setup_aqua_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup aquatic (immature) mosquito model with trace (forced) emergence — setup_aqua_trace","title":"Setup aquatic (immature) mosquito model with trace (forced) emergence — setup_aqua_trace","text":"Emergence passed (possibly time varying) parameter decoupled adult mosquito dynamics.","code":""},{"path":"/reference/setup_aqua_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup aquatic (immature) mosquito model with trace (forced) emergence — setup_aqua_trace","text":"","code":"setup_aqua_trace(model, lambda, stochastic)"},{"path":"/reference/setup_aqua_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup aquatic (immature) mosquito model with trace (forced) emergence — setup_aqua_trace","text":"model object make_MicroMoB lambda either vector length equal p, matrix p rows tmax columns, matrix p rows 365 columns stochastic model update deterministically stochastically?","code":""},{"path":"/reference/setup_humans_SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup humans with SIS pathogen model — setup_humans_SIS","title":"Setup humans with SIS pathogen model — setup_humans_SIS","text":"simple SIS model","code":""},{"path":"/reference/setup_humans_SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup humans with SIS pathogen model — setup_humans_SIS","text":"","code":"setup_humans_SIS(   model,   stochastic,   theta,   wf = NULL,   H,   X,   b = 0.55,   c = 0.15,   r = 1/200 )"},{"path":"/reference/setup_humans_SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup humans with SIS pathogen model — setup_humans_SIS","text":"model object MicroWNV::make_microWNV stochastic model update deterministically stochastically? theta time spent matrix wf biting weights H vector strata population sizes X number infectious persons strata b transmission efficiency (mosquito human) c transmission efficiency (human mosquito) r recovery rate (inverse infectious duration)","code":""},{"path":"/reference/setup_mosquito_RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup generalized Ross-Macdonald mosquito model — setup_mosquito_RM","title":"Setup generalized Ross-Macdonald mosquito model — setup_mosquito_RM","text":"generalized RM model allows time varying EIP survival probability. complies mosquito component interface, may simulated deterministically stochastically.","code":""},{"path":"/reference/setup_mosquito_RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup generalized Ross-Macdonald mosquito model — setup_mosquito_RM","text":"","code":"setup_mosquito_RM(model, stochastic, f, q, eip, p, psi, M, Y, Z)"},{"path":"/reference/setup_mosquito_RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup generalized Ross-Macdonald mosquito model — setup_mosquito_RM","text":"model object make_MicroMoB stochastic model update deterministically stochastically? f blood feeding rate q human blood feeding fraction eip Extrinsic Incubation Period, may either scalar, vector length 365, vector length equal tmax model object make_MicroMoB p daily survival probability, may either scalar, vector length 365, vector length equal tmax model object make_MicroMoB psi mosquito dispersal matrix (rows must sum 1) M total mosquito density per patch (vector length p) Y density incubating mosquitoes per patch (vector length p) Z density infectious mosquitoes per patch (vector length p)","code":""},{"path":"/reference/setup_visitor_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup trace driven visitors — setup_visitor_trace","title":"Setup trace driven visitors — setup_visitor_trace","text":"model complies visitors component interface. adds named list model$visitor.","code":""},{"path":"/reference/setup_visitor_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup trace driven visitors — setup_visitor_trace","text":"","code":"setup_visitor_trace(model, Wd = NULL, xd = NULL)"},{"path":"/reference/setup_visitor_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup trace driven visitors — setup_visitor_trace","text":"model object make_MicroMoB Wd vector length p, matrix p rows tmax columns, NULL set 0 (visitors) xd vector length p, matrix p rows tmax columns, NULL set 0 (visitors)","code":""},{"path":"/reference/step_aqua.html","id":null,"dir":"Reference","previous_headings":"","what":"Update aquatic (immature) mosquito populations — step_aqua","title":"Update aquatic (immature) mosquito populations — step_aqua","text":"method dispatches type model$aqua","code":""},{"path":"/reference/step_aqua.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update aquatic (immature) mosquito populations — step_aqua","text":"","code":"step_aqua(model)"},{"path":"/reference/step_aqua.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update aquatic (immature) mosquito populations — step_aqua","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_aqua.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Update aquatic (immature) mosquito populations for forced emergence — step_aqua.trace","title":"Update aquatic (immature) mosquito populations for forced emergence — step_aqua.trace","text":"function nothing trace models endogenous dynamics.","code":""},{"path":"/reference/step_aqua.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update aquatic (immature) mosquito populations for forced emergence — step_aqua.trace","text":"","code":"# S3 method for trace step_aqua(model)"},{"path":"/reference/step_aqua.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update aquatic (immature) mosquito populations for forced emergence — step_aqua.trace","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_humans.SIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIS human model — step_humans.SIS","title":"Update SIS human model — step_humans.SIS","text":"Update SIS human model","code":""},{"path":"/reference/step_humans.SIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIS human model — step_humans.SIS","text":"","code":"# S3 method for SIS step_humans(model)"},{"path":"/reference/step_humans.SIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIS human model — step_humans.SIS","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_humans.SIS_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIS human model (deterministic) — step_humans.SIS_deterministic","title":"Update SIS human model (deterministic) — step_humans.SIS_deterministic","text":"Update SIS human model (deterministic)","code":""},{"path":"/reference/step_humans.SIS_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIS human model (deterministic) — step_humans.SIS_deterministic","text":"","code":"# S3 method for SIS_deterministic step_humans(model)"},{"path":"/reference/step_humans.SIS_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIS human model (deterministic) — step_humans.SIS_deterministic","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_humans.SIS_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIS human model (stochastic) — step_humans.SIS_stochastic","title":"Update SIS human model (stochastic) — step_humans.SIS_stochastic","text":"Update SIS human model (stochastic)","code":""},{"path":"/reference/step_humans.SIS_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIS human model (stochastic) — step_humans.SIS_stochastic","text":"","code":"# S3 method for SIS_stochastic step_humans(model)"},{"path":"/reference/step_humans.SIS_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIS human model (stochastic) — step_humans.SIS_stochastic","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_humans.html","id":null,"dir":"Reference","previous_headings":"","what":"Update human population — step_humans","title":"Update human population — step_humans","text":"method dispatches type model$human.","code":""},{"path":"/reference/step_humans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update human population — step_humans","text":"","code":"step_humans(model)"},{"path":"/reference/step_humans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update human population — step_humans","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_mosquitoes.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","title":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","text":"function dispatches second argument model$mosquito stochastic deterministic behavior.","code":""},{"path":"/reference/step_mosquitoes.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","text":"","code":"# S3 method for RM step_mosquitoes(model)"},{"path":"/reference/step_mosquitoes.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_mosquitoes.RM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Ross-Macdonald mosquitoes — step_mosquitoes.RM","text":"see step_mosquitoes.RM_deterministic step_mosquitoes.RM_stochastic","code":""},{"path":"/reference/step_mosquitoes.RM_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Ross-Macdonald mosquitoes (deterministic) — step_mosquitoes.RM_deterministic","title":"Update Ross-Macdonald mosquitoes (deterministic) — step_mosquitoes.RM_deterministic","text":"Update Ross-Macdonald mosquitoes (deterministic)","code":""},{"path":"/reference/step_mosquitoes.RM_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Ross-Macdonald mosquitoes (deterministic) — step_mosquitoes.RM_deterministic","text":"","code":"# S3 method for RM_deterministic step_mosquitoes(model)"},{"path":"/reference/step_mosquitoes.RM_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Ross-Macdonald mosquitoes (deterministic) — step_mosquitoes.RM_deterministic","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_mosquitoes.RM_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Ross-Macdonald mosquitoes (stochastic) — step_mosquitoes.RM_stochastic","title":"Update Ross-Macdonald mosquitoes (stochastic) — step_mosquitoes.RM_stochastic","text":"Update Ross-Macdonald mosquitoes (stochastic)","code":""},{"path":"/reference/step_mosquitoes.RM_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Ross-Macdonald mosquitoes (stochastic) — step_mosquitoes.RM_stochastic","text":"","code":"# S3 method for RM_stochastic step_mosquitoes(model)"},{"path":"/reference/step_mosquitoes.RM_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Ross-Macdonald mosquitoes (stochastic) — step_mosquitoes.RM_stochastic","text":"model object make_MicroMoB","code":""},{"path":"/reference/step_mosquitoes.html","id":null,"dir":"Reference","previous_headings":"","what":"Update mosquito population — step_mosquitoes","title":"Update mosquito population — step_mosquitoes","text":"method dispatches type model$mosquito","code":""},{"path":"/reference/step_mosquitoes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update mosquito population — step_mosquitoes","text":"","code":"step_mosquitoes(model)"},{"path":"/reference/step_mosquitoes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update mosquito population — step_mosquitoes","text":"model object make_MicroMoB","code":""},{"path":"/reference/strata_to_residency_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for lumped population strata (counts) — strata_to_residency_counts","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"input given matrix population counts per strata (columns) patch (rows), function calculates residency matrix population size overall stratification residency strata.","code":""},{"path":"/reference/strata_to_residency_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"","code":"strata_to_residency_counts(H_counts)"},{"path":"/reference/strata_to_residency_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"H_counts matrix population counts","code":""},{"path":"/reference/strata_to_residency_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"list three elements: J: residency matrix mapping elements H patches H: overall population distribution strata patches","code":""},{"path":"/reference/strata_to_residency_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for lumped population strata (counts) — strata_to_residency_counts","text":"","code":"# taken from package tests J <- matrix(    c(0.3, 0.5, 0.2,    0.1, 0.6, 0.3), nrow = 3, ncol = 2, byrow = FALSE ) H <- c(50, 60) H_overall <- J %*% diag(H) residency <- strata_to_residency_proportion(H_strata = H, J_strata = J)"},{"path":"/reference/strata_to_residency_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"input given vector population sizes per-strata, lumped patches, separate matrix whose columns describe strata distributed patches, function calculates residency matrix population size overall stratification residency strata.","code":""},{"path":"/reference/strata_to_residency_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"","code":"strata_to_residency_proportion(H_strata, J_strata)"},{"path":"/reference/strata_to_residency_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"H_strata vector population size strata J_strata matrix whose columns sum one giving distribution strata populations patches","code":""},{"path":"/reference/strata_to_residency_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"list three elements: assignment_indices: provides mapping patch (rows) strata (columns) \"unrolled\" vector H J: residency matrix mapping elements H patches H: overall population distribution strata patches","code":""},{"path":"/reference/strata_to_residency_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for lumped population strata (proportional assignment) — strata_to_residency_proportion","text":"","code":"# taken from package tests J <- matrix(    c(0.3, 0.5, 0.2,    0.1, 0.6, 0.3), nrow = 3, ncol = 2, byrow = FALSE ) H <- c(50, 60) H_overall <- J %*% diag(H) residency <- strata_to_residency_proportion(H_strata = H, J_strata = J)"}]
